<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Allerta&family=Kodchasan:wght@400;500;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <title>Seteeduca - Editar Professor</title>
  <style>
    * { 
      margin: 0; 
      padding: 0; 
      box-sizing: border-box; 
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    body {
      background-color: #e8e8e8;
      min-height: 100vh;
      display: flex;
    }

    .sidebar {
      width: 280px;
      background: linear-gradient(180deg, #FFF4DF 0%, #f8f0e3 100%);
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      box-shadow: 2px 0 15px rgba(0, 0, 0, 0.1);
      min-height: 100vh;
      flex-shrink: 0;
    }

    .logo {
      padding: 0px 40px;
      text-align: center;
      margin-bottom: 25px;
      margin-top: 30px;
    }

    .menu {
      flex: 1;
      padding: 20px 18px;
      overflow-y: auto;
    }

    .menu-item {
      padding: 30px 20px;
      margin-bottom: 6px;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      display: flex;
      align-items: center;
      font-weight: 500;
      overflow: visible;
      color: black;
    }

    .menu-item i {
      margin-right: 15px;
      font-size: 18px;
      width: 24px;
      text-align: center;
      z-index: 2;
    }

    .menu-item span {
      z-index: 2;
      font-size: 15px;
    }

    .menu-item:hover {
      background-color: #6c757d21;
    }

    .menu-item::after {
      padding: 0 10px;
      content: '';
      position: absolute;
      bottom: -3px;
      left: 20px;
      height: 2px;
      width: 0px;
      transition: width 0.3s ease;
      border-radius: 1px;
    }

    .menu-item:hover::after,
    .menu-item.active::after {
      width: calc(100% - 40px);
    }

     .menu-item:nth-child(1)::after { background-color: #F4BF27; }
    .menu-item:nth-child(2)::after { background-color: #00A6FF; }
    .menu-item:nth-child(3)::after { background-color: #9747FF; }
    .menu-item:nth-child(4)::after { background-color: #F88C12; }
    .menu-item:nth-child(5)::after { background-color: #D22A2A; }
    .menu-item:nth-child(6)::after { background-color: #59C631; }


    .menu-item.active {
      background-color: rgba(128, 128, 128, 0.356);
      color: #333;
      font-weight: 600;
    }

    .menu-item.active::before {
      content: '';
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      width: 8px;
      height: 8px;
      border-radius: 50%;
      box-shadow: black;
      z-index: 2;
    }
        
    .seteeduca {
      color: #333;
      text-align: center;
      margin-bottom: 10px;
    }

    .sidebar-footer {
      padding: 20px 18px;
      border-top: 1px solid rgba(0, 0, 0, 0.1);
    }
    
    .logout-button {
      padding: 16px 20px;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      font-weight: 500;
      color: #333;
      width: 100%;
    }

    .logout-button i {
      margin-right: 15px;
      font-size: 18px;
      width: 24px;
      text-align: center;
    }

    .logout-button:hover {
      background-color: rgba(210, 42, 42, 0.1); 
      color: #ef7215; 
      font-weight: 600;
    }

    .main-content {
      flex: 1;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .header {
      background: #ef7215;
      height: 80px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 30px;
      color: white;
      width: 100%;
    }

    .header-title {
    display: flex; 
      align-items: center;
      position: relative; 
      top: 0.7vh;
      gap: 10px; 
      font-size: 1.5rem; 
      color: rgb(255, 255, 255); 
      font-family: 'Kodchasan', sans-serif;
    }

    .header-title i {
      margin-right: 15px;
      font-size: 28px;
    }

    .user-profile {
      display: flex;
      align-items: center;
      gap: 15px;
      cursor: pointer;
    }

    .profile-pic {
      width: 45px;
      height: 45px;
      background: #333;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 18px;
    }

    .profile-arrow {
      color: white;
      font-size: 16px;
    }

    .content-area {
      padding: 30px;
      background: #fcf8f2;
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      width: 100%;
    }
    
    .caixa {
      width: 90%; 
      max-width: 800px; 
      min-height: 500px;
      background-color: #fff; 
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 40px; 
      margin-top: 20px;
      border-top: 5px solid #ef7215;
      transition: transform 0.3s;
      flex: 1;
      max-width: none;
      width: 100%;
    }
    
    .caixa:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }
    
    form { 
      display: flex; 
      flex-direction: column; 
      gap: 25px; 
      width: 100%; 
    }
    
    .campo { 
      display: flex; 
      flex-direction: column; 
      gap: 10px; 
      width: 100%; 
    }
    
    label { 
      font-weight: 600; 
      font-size: 1.1rem; 
      color: #333;
      margin-left: 10px;
    }
    
    input, select {
      padding: 14px 18px; 
      border: 2px solid #ddd; 
      border-radius: 8px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
      font-size: 1rem; 
      width: 100%;
      background-color: #fff;
      transition: all 0.3s;
    }
    
    input:focus, select:focus {
      outline: none;
      border-color: #ef7215;
      box-shadow: 0 0 0 3px rgba(193, 39, 45, 0.2);
    }
    
    .button-container {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
    }
    
    .btn-action-form {
      width: 180px; 
      height: 55px; 
      border: none; 
      border-radius: 8px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer; 
      transition: all 0.3s; 
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    
    .btn-save {
      background-color: #28a745;
      color: white;
      box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
    }
    
    .btn-save:hover { 
      background-color: #218838; 
      transform: scale(1.05); 
      box-shadow: 0 6px 12px rgba(40, 167, 69, 0.4);
    }
    
    .btn-cancel {
      background-color: #6c757d;
      color: white;
      box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
    }
    
    .btn-cancel:hover { 
      background-color: #5a6268; 
      transform: scale(1.05); 
      box-shadow: 0 6px 12px rgba(108, 117, 125, 0.4);
    }
    
    .btn-save::before {
      content: "✓";
      font-size: 1.2rem;
      line-height: 1;
      display: inline-block;
    }
    
    .btn-cancel::before {
      content: "✕";
      font-size: 1.2rem;
      line-height: 1;
      display: inline-block;
    }
  
    .modal {
      display: none; 
      position: fixed; 
      top: 0; 
      left: 0; 
      right: 0; 
      bottom: 0;
      background-color: rgba(0,0,0,0.5); 
      justify-content: center; 
      align-items: center; 
      z-index: 9999;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      backdrop-filter: blur(3px);
    }
    
    .modal-content {
      background: #fff; 
      padding: 40px; 
      border-radius: 12px; 
      text-align: center;
      max-width: 400px; 
      width: 90%;
      box-shadow: 0 10px 25px rgba(0,0,0,0.2);
      border-top: 5px solid #28a745;
      animation: modalFadeIn 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      position: relative;
    }
    
    .modal-content::before {
      content: "";
      position: absolute;
      top: -50px;
      left: 50%;
      transform: translateX(-50%);
      width: 80px;
      height: 80px;
      background-color: #28a745;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/></svg>');
      background-repeat: no-repeat;
      background-position: center;
      background-size: 40px;
      box-shadow: 0 4px 10px rgba(40, 167, 69, 0.3);
    }
    
    .modal-content p {
      font-size: 1.2rem;
      margin: 30px 0 25px;
      color: #333;
      font-weight: 500;
      line-height: 1.5;
    }
    
    .modal-content strong {
      color: #ef7215;
      font-weight: 700;
    }
    
    .modal-buttons { 
      margin-top: 20px; 
      display: flex; 
      justify-content: center;
    }
    
    .modal-buttons button {
      padding: 12px 30px; 
      border: none; 
      border-radius: 8px; 
      cursor: pointer;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
      background-color: #28a745; 
      color: white;
      font-size: 1rem;
      font-weight: 600;
      transition: all 0.3s;
      box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
    }
    
    .modal-buttons button:hover { 
      background-color: #218838; 
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(40, 167, 69, 0.4);
    }
    
    @keyframes modalFadeIn {
      from { 
        opacity: 0; 
        transform: translateY(20px) scale(0.95); 
      }
      to { 
        opacity: 1; 
        transform: translateY(0) scale(1); 
      }
    }

    @media (max-width: 992px) {
      .main-content {
        margin-left: 230px;
      }
    }

    @media (max-width: 768px) {
      .sidebar { 
        width: 70px; 
      }
      
      .menu-item span, .logout-button span { 
        display: none; 
      }
      
      .menu-item i, .logout-button i { 
        margin-right: 0; 
      }
      
      .main-content {
        margin-left: 70px;
      }

      .button-container {
        flex-direction: column;
        align-items: center;
      }
      
      .btn-action-form {
        width: 100%;
        max-width: 250px;
      }
    }

    @media (max-width: 576px) {
      .main-content {
        margin-left: 0;
      }
    }
  </style>
</head>
<body>
  
  <div class="sidebar">
    <div>
      <div class="logo">
        <img src="imagem/logo.png" alt="logo">
      </div>
            <div class="menu">
                <div class="menu-item" onclick="navegarPara('inicio')">
                    <i class="fas fa-home"></i>
                    <span>INÍCIO</span>
                </div>
                <div class="menu-item" onclick="navegarPara('cadastro')">
                    <i class="fas fa-address-card"></i>
                    <span>CADASTRO</span>
                </div>
                <div class="menu-item" onclick="navegarPara('matricula')">
                    <i class="fas fa-user-graduate"></i>
                    <span>MATRÍCULA</span>
                </div>
                <div class="menu-item active">
                    <i class="fas fa-chalkboard-teacher"></i>
                    <span>PROFESSOR</span>
                </div>
                <div class="menu-item " onclick="navegarPara('turma')"> 
                    <i class="fas fa-users"></i>
                    <span>TURMA</span>
                </div>
                <div class="menu-item" onclick="navegarPara('financeiro')">
                    <i class="fas fa-dollar-sign"></i>
                    <span>FINANCEIRO</span>
                </div>
            </div>
        </div>
    <div>
      <div class="seteeduca">
        <p>@seteeduca</p>
      </div>
      <div class="sidebar-footer">
        <div class="logout-button">
          <i class="fa-solid fa-right-from-bracket"></i>
          <span>Sair</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Header -->
    <div class="header">
       <div class="header-title">
        <i class="fas fa-edit"></i>
        <span>Editar <b>PROFESSOR</b></span>      
      </div>
      <div class="user-profile">
        <div class="profile-pic">
          <i class="fas fa-user"></i>
        </div>
        <div class="profile-arrow">
          <i class="fas fa-chevron-down"></i>
        </div>
      </div>
    </div>

    <!-- Content Area -->
    <div class="content-area">
      <div class="caixa">
        <form id="formEditar">
          <div class="campo">
            <label for="nome">Nome:</label>
            <input type="text" id="nome" name="nome" placeholder="Digite o nome completo do professor" required>
          </div>
          <div class="campo">
            <label for="cpf">CPF:</label>
            <input type="text" id="cpf" name="cpf" placeholder="cpf do professor" required>
          </div>
          <div class="campo">
            <label for="mensalidade">Mensalidade:</label>
            <select id="mensalidade" name="mensalidade" required>
              <option value="" disabled selected>Selecione a mensalidade</option>
              <option value="0-1/mat/R$ 150">0-1 anos / Matutino / R$ 150,00</option>
              <option value="0-1/ves/R$ 150">0-1 anos / Vespertino / R$ 150,00</option>
              <option value="0-1/int/R$ 250">0-1 anos / Integral / R$ 250,00</option>
              <option value="1-2/mat/R$ 180">1-2 anos / Matutino / R$ 180,00</option>
              <option value="1-2/ves/R$ 180">1-2 anos / Vespertino / R$ 180,00</option>
              <option value="1-2/int/R$ 280">1-2 anos / Integral / R$ 280,00</option>
              <option value="2-3/mat/R$ 200">2-3 anos / Matutino / R$ 200,00</option>
              <option value="2-3/ves/R$ 200">2-3 anos / Vespertino / R$ 200,00</option>
              <option value="2-3/int/R$ 300">2-3 anos / Integral / R$ 300,00</option>
              <option value="3-4/mat/R$ 220">3-4 anos / Matutino / R$ 220,00</option>
              <option value="3-4/ves/R$ 220">3-4 anos / Vespertino / R$ 220,00</option>
              <option value="3-4/int/R$ 320">3-4 anos / Integral / R$ 320,00</option>
            </select>
          </div>
          <div class="campo">
            <label for="quantidade_alunos">Quantidade de Alunos:</label>
            <input type="number" id="quantidade_alunos" name="quantidade_alunos" min="1" placeholder="Número de alunos" required>
          </div>
          <div class="button-container">
            <button type="submit" class="btn-action-form btn-save">Salvar alterações</button>
            <button type="button" class="btn-action-form btn-cancel" id="btnCancelar">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <div class="modal" id="confirmModal">
    <div class="modal-content">
      <p id="modalMessage"></p>
      <div class="modal-buttons">
        <button class="ok">Ok</button>
      </div>
    </div>
  </div>

  <script>

     // Função para navegação entre páginas
        function navegarPara(pagina) {
            // Rotas baseadas no seu servidor Express
            const rotas = {
                'inicio': '/home',
                'professor': '/acessar-prof',
                'financeiro': '/opcoes-financeiro',
                'turmas': '/turmas-cadastradas',
                'matricula': '/matricula',
                'cadastro': '/opcoes-aluno'
            };

            // Navegar para a página correspondente
            if (rotas[pagina]) {
                window.location.href = rotas[pagina];
            } else {
                console.warn(`Rota não encontrada para: ${pagina}`);
            }
        }

        // Função para carregar dados do storage
        function carregarDoStorage() {
            const turmasSalvas = sessionStorage.getItem('turmas') || "[]";
            return JSON.parse(turmasSalvas);
        }

        // Função para salvar no storage
        function salvarNoStorage(turmas) {
            sessionStorage.setItem('turmas', JSON.stringify(turmas));
        }

    document.addEventListener('DOMContentLoaded', function() {
      // Menu interativo
      document.querySelectorAll('.menu-item').forEach(item => {
        item.addEventListener('click', function() {
          document.querySelectorAll('.menu-item').forEach(i => {
            i.classList.remove('active');
          });
          this.classList.add('active');
        });
      });

      // Formulário
      const form = document.getElementById('formEditar');
      const modal = document.getElementById('confirmModal');
      const okBtn = modal.querySelector('.ok');
      const modalMessage = document.getElementById('modalMessage');
      const btnCancelar = document.getElementById('btnCancelar');

      // Variáveis para armazenar dados da edição
      let turmaIndex = -1;
      let dadosTurma = {
        professor: "",
        turma: "",
        mensalidade: "",
        quantidade: ""
      };

      // Tentar carregar dados da turma para edição de várias fontes
      let turmaParaEditar = sessionStorage.getItem('turmaParaEditar') || 
                           localStorage.getItem('turmaParaEditar') ||
                           sessionStorage.getItem('editTurma') ||
                           localStorage.getItem('editTurma');
      
      console.log('Dados recebidos para edição:', turmaParaEditar);
      
      // Se não encontrou dados específicos para edição, tentar buscar pela URL ou outros métodos
      if (!turmaParaEditar) {
        console.log('Tentando métodos alternativos para carregar dados...');
        
        // Verificar se há dados de turma nas variáveis de URL
        const urlParams = new URLSearchParams(window.location.search);
        const turmaId = urlParams.get('id') || urlParams.get('index');
        
        if (turmaId) {
          console.log('ID encontrado na URL:', turmaId);
          // Carregar todas as turmas e buscar pela ID
          const todasTurmas = carregarDoStorage();
          const index = parseInt(turmaId);
          if (index >= 0 && index < todasTurmas.length) {
            turmaParaEditar = JSON.stringify({
              index: index,
              dados: todasTurmas[index]
            });
          }
        }
      }
      
      if (turmaParaEditar) {
        try {
          const { index, dados } = JSON.parse(turmaParaEditar);
          turmaIndex = parseInt(index);
          dadosTurma = dados;
          
          console.log('Índice da turma:', turmaIndex);
          console.log('Dados da turma:', dadosTurma);
          
          // Validar dados antes de preencher
          if (turmaIndex >= 0 && dadosTurma && dadosTurma.turma) {
            // Verificar se a turma ainda existe no storage
            const turmasAtuais = carregarDoStorage();
            if (turmaIndex < turmasAtuais.length && turmasAtuais[turmaIndex]) {
              // Preencher formulário com dados existentes
              document.getElementById('professor').value = dadosTurma.professor || '';
              document.getElementById('turma').value = dadosTurma.turma || '';
              document.getElementById('mensalidade').value = dadosTurma.mensalidade || '';
              document.getElementById('quantidade_alunos').value = dadosTurma.quantidade || '';
              
              console.log('Formulário preenchido com sucesso');
              
              // Limpar os storages após carregar
              sessionStorage.removeItem('turmaParaEditar');
              localStorage.removeItem('turmaParaEditar');
              sessionStorage.removeItem('editTurma');
              localStorage.removeItem('editTurma');
            } else {
              throw new Error('Turma não encontrada no storage atual');
            }
          } else {
            throw new Error('Dados incompletos ou índice inválido');
          }
        } catch (error) {
          console.error('Erro ao carregar dados da turma:', error);
          // Tentar carregar dados de exemplo para demonstração
          console.log('Carregando dados de exemplo...');
          document.getElementById('professor').value = 'Jéssica Figueiredo';
          document.getElementById('turma').value = 'Infantil 2';
          document.getElementById('mensalidade').value = '3-4/int/R$ 320';
          document.getElementById('quantidade_alunos').value = '20';
          turmaIndex = 0; // Definir índice padrão
          alert('Erro: Não foi possível encontrar a turma para atualizar. Por favor, tente novamente.');
        }
      } else {
        console.warn('Nenhum dado de turma encontrado');
        // Carregar dados de exemplo para demonstração
        document.getElementById('professor').value = 'Jéssica Figueiredo';
        document.getElementById('turma').value = 'Infantil 2';
        document.getElementById('mensalidade').value = '3-4/int/R$ 320';
        document.getElementById('quantidade_alunos').value = '20';
        turmaIndex = 0;
        alert('Nenhuma turma selecionada para edição. Dados de exemplo carregados.');
      }

      form.addEventListener('submit', function(event) {
        event.preventDefault();

        const professor = document.getElementById('professor').value.trim();
        const turma = document.getElementById('turma').value.trim();
        const mensalidade = document.getElementById('mensalidade').value;
        const quantidade = document.getElementById('quantidade_alunos').value;

        if (!professor || !turma || mensalidade === "" || !quantidade) {
          alert("Por favor, preencha todos os campos obrigatórios!");
          return;
        }

        console.log('Salvando alterações...');
        console.log('Dados atualizados:', { professor, turma, mensalidade, quantidade });

        // Carregar lista de turmas atual
        let turmas = carregarDoStorage();
        console.log('Turmas atuais:', turmas);
        console.log('Atualizando turma no índice:', turmaIndex);
        console.log('Total de turmas:', turmas.length);

        // Se não há turmas ou índice inválido, criar dados de exemplo
        if (!Array.isArray(turmas) || turmas.length === 0) {
          console.log('Criando turma inicial...');
          turmas = [{
            professor: professor,
            turma: turma,
            mensalidade: mensalidade,
            quantidade: quantidade
          }];
          turmaIndex = 0;
        } else if (turmaIndex < 0 || turmaIndex >= turmas.length) {
          console.log('Índice inválido, tentando encontrar turma por nome...');
          
          // Tentar encontrar a turma pelo nome original se disponível
          if (dadosTurma && dadosTurma.turma) {
            const novoIndice = turmas.findIndex(t => t.turma === dadosTurma.turma);
            if (novoIndice >= 0) {
              turmaIndex = novoIndice;
              console.log('Turma encontrada no novo índice:', turmaIndex);
            } else {
              console.log('Turma não encontrada, adicionando como nova...');
              turmas.push({
                professor: professor,
                turma: turma,
                mensalidade: mensalidade,
                quantidade: quantidade
              });
              turmaIndex = turmas.length - 1;
            }
          } else {
            console.log('Adicionando como nova turma...');
            turmas.push({
              professor: professor,
              turma: turma,
              mensalidade: mensalidade,
              quantidade: quantidade
            });
            turmaIndex = turmas.length - 1;
          }
        } else {
          // Atualizar a turma específica no índice correto
          turmas[turmaIndex] = {
            professor: professor,
            turma: turma,
            mensalidade: mensalidade,
            quantidade: quantidade
          };
        }

        console.log('Turma atualizada:', turmas[turmaIndex]);
        
        // Salvar no storage
        salvarNoStorage(turmas);
        
        // Confirmar que foi salvo
        const turmasVerificacao = carregarDoStorage();
        console.log('Verificação - turmas após salvar:', turmasVerificacao);
        console.log('Turma específica após salvar:', turmasVerificacao[turmaIndex]);

        modalMessage.innerHTML = `
          Turma <strong>${turma}</strong> foi atualizada com sucesso!
          <div style="margin-top: 15px; font-size: 0.9rem; color: #666;">
            Professor(a): ${professor}<br>
            Mensalidade: ${mensalidade} | Alunos: ${quantidade}
          </div>
        `;
        
        modal.style.display = 'flex';
      });

      okBtn.addEventListener('click', function() {
        modal.style.display = 'none';
        // Redirecionar de volta para a lista de turmas
        window.location.href = '/turmas-cadastradas';
      });

      btnCancelar.addEventListener('click', function() {
        if (confirm('Tem certeza que deseja cancelar? As alterações não serão salvas.')) {
          window.location.href = '/turmas-cadastradas';
        }
      });

      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          modal.style.display = 'none';
        }
      });
    });
  </script>
</body>
</html>