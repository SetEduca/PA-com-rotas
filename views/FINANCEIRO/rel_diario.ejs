<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relatório Financeiro</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 0;
            margin: 0;
        }

        .container {
            width: 100%;
            background: white;
            min-height: 100vh;
            position: relative;
            overflow: hidden;
        }

        .half-moon-nav {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 300px;
            height: 70px;
            background: #59C631;
            border-radius: 150px 150px 0 0;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.2);
        }

        .nav-item {
            flex: 1;
            text-align: center;
            color: white;
            padding: 15px 0;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            margin: 0 5px;
        }

        .nav-item.active {
            background: white;
            color: #4CAF50;
            border-radius: 20px;
            margin: 0 5px;
        }

        .header {
            background-color: #59C631;
            padding: 15px;
            border-radius: 0px 0px 40px 40px;
            color: black;
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            flex-wrap: wrap;
        }

        .back-arrow {
            font-size: 24px;
            cursor: pointer;
            color: white;
        }

        .title-section {
            display: flex;
            align-items: center;
            gap: 10px;
            flex: 1;
            margin-left: 10px;
        }

        .menu-icon {
            width: 30px;
            height: 30px;
            background: #59C631;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .title {
            font-size: 18px;
            font-weight: bold;
        }

        .tab-container {
            background:#59C631;
            padding: 10px 25px 10px;
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            width: 100%;
            align-items: center; 
        }

        .h1 {
            color: white;
            font-size: 20px;
            font-weight: bold;
            margin-right: auto; 
            text-align: center;
            flex: 1; 
        }

       .tab {
            padding: 8px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
        }

        .tab.active {
            background: white;
            color: #4CAF50;
        }

        .tab.inactive {
            background: #66BB6A;
            color: white;
        }

        .green-bar {
            background: #4CAF50;
            height: 5px;
            margin-bottom:5px;
            width: 100%;
        }

        .form-container {
            padding: 20px;
            background: #f5f5f5;
        }

        .form-group {
            margin-bottom: 20px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .form-group label {
            font-weight: bold;
            color: #666;
        }

        .form-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .form-group input:focus {
            outline: none;
            border-color: #4CAF50;
        }

        .form-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
            gap: 10px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            flex: 1;
        }

        .btn-cancel {
            background: #f5f5f5;
            color: #666;
            border: 1px solid #ddd;
        }

        .btn-cancel:hover {
            background: #eee;
        }

        .btn-add {
            background: #4CAF50;
            color: white;
        }

        .btn-add:hover {
            background: #45a049;
        }

        .main-content {
            padding: 20px;
            flex: 1;
            overflow-y: auto;
        }

        .search-box {
            width: 100%;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 16px;
            margin-bottom: 25px;
            color: #666;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s;
        }

        .search-box:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.2);
        }

        .totals-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 30px;
            align-items: center;
            justify-content: center;
        }

        .total-card {
            flex: 1;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            color: white;
            font-weight: bold;
            min-width: 200px;
            max-width: 300px;
            width: 100%;
        }

        .total-recebido {
            background: linear-gradient(135deg, #4CAF50, #45a049);
        }

        .total-pendente {
            background: linear-gradient(135deg, #f44336, #d32f2f);
        }

        .total-geral {
            background: linear-gradient(135deg, #2196F3, #1976D2);
        }

        .total-label {
            font-size: 14px;
            opacity: 0.9;
            margin-bottom: 8px;
        }

        .total-value {
            font-size: 24px;
            font-weight: bold;
        }

        .history-btn {
            background: linear-gradient(135deg, #66BB6A, #4CAF50);
            color: white;
            border: none;
            padding: 20px;
            border-radius: 15px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            display: block;
            margin: 40px auto;
            text-align: center;
            box-shadow: 0 6px 20px rgba(102, 187, 106, 0.3);
            transition: all 0.3s;
            width: 100%;
        }

        .history-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 187, 106, 0.4);
        }

        /* Mensagem de sucesso melhorada */
        .success-message {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 20px;
            border-radius: 15px;
            margin: 20px;
            text-align: center;
            font-weight: bold;
            box-shadow: 0 6px 25px rgba(76, 175, 80, 0.4);
            display: none;
            animation: slideInBounce 0.6s ease-out;
            position: relative;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .success-message .icon {
            font-size: 24px;
            margin-right: 10px;
        }

        .success-message .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            opacity: 0.8;
        }

        .success-message .close-btn:hover {
            opacity: 1;
        }

        @keyframes slideInBounce {
            0% {
                opacity: 0;
                transform: translateY(-30px) scale(0.9);
            }
            60% {
                opacity: 1;
                transform: translateY(5px) scale(1.02);
            }
            100% {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        @keyframes fadeOutUp {
            0% {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
            100% {
                opacity: 0;
                transform: translateY(-20px) scale(0.95);
            }
        }

        /* Estilos para lista de relatórios e pesquisa */
        .reports-list {
            margin-bottom: 30px;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .report-item {
            background: #f8f9fa;
            border-left: 4px solid #4CAF50;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            position: relative;
        }

        .report-item:hover {
            background: #e8f5e8;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .report-description {
            font-weight: bold;
            color: #333;
            font-size: 16px;
        }

        .report-value {
            font-weight: bold;
            color: #4CAF50;
            font-size: 18px;
        }

        .report-details {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 14px;
            color: #666;
        }

        .report-date {
            background: #4CAF50;
            color: white;
            padding: 4px 8px;
            border-radius: 15px;
            font-size: 12px;
        }

        .report-type {
            background: #2196F3;
            color: white;
            padding: 4px 8px;
            border-radius: 15px;
            font-size: 12px;
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }

        .no-results i {
            font-size: 48px;
            color: #ddd;
            margin-bottom: 15px;
        }

        .search-highlight {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            padding: 2px 4px;
            border-radius: 3px;
            font-weight: bold;
        }

        /* Loading no botão */
        .btn-add.loading {
            position: relative;
            color: transparent;
        }

        .btn-add.loading::after {
            content: "";
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border-radius: 50%;
            border: 2px solid rgba(255,255,255,0.3);
            border-top-color: white;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Botão de edição */
        .edit-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #2196F3;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .report-item:hover .edit-btn {
            opacity: 1;
        }

        /* Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal {
            background: white;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            transform: translateY(-20px);
            transition: transform 0.3s;
        }

        .modal-overlay.active .modal {
            transform: translateY(0);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 15px;
        }

        .modal-title {
            font-size: 20px;
            font-weight: bold;
            color: #333;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 22px;
            cursor: pointer;
            color: #999;
        }

        .modal-close:hover {
            color: #333;
        }

        .modal-body {
            margin-bottom: 25px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .modal-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            margin-bottom: 15px;
        }

        .modal-input:focus {
            outline: none;
            border-color: #4CAF50;
        }

        .error-message {
            color: #f44336;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }

        .error-message.show {
            display: block;
        }
       
        @media (min-width: 768px) {
            .form-group {
                flex-direction: row;
                align-items: center;
            }
            
            .form-group label {
                min-width: 100px;
            }
            
            .totals-container {
                flex-direction: row;
                justify-content: center;
                align-items: center;
            }
            
            .total-card {
                width: auto;
                flex: 0 1 300px;
            }
            
            .btn {
                flex: 0 1 auto;
            }
        }

        @media (max-width: 480px) {
            .header {
                flex-direction: column;
                text-align: center;
                gap: 10px;
                padding: 15px 10px;
            }
            
            .header-left, .header-right {
                justify-content: center;
                width: 100%;
            }
            
            .tab-container {
                justify-content: center;
            }
            
            .form-container {
                padding: 15px;
            }
            
            .main-content {
                padding: 15px;
            }

            .modal {
                width: 95%;
                padding: 15px;
            }
        }

        /* Menu mobile */
        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
        }

        @media (max-width: 768px) {
            .mobile-menu-btn {
                display: block;
                position: absolute;
                left: 15px;
                top: 15px;
            }
            
            .header-left {
                margin-left: 30px;
            }
        }

        @media (max-width: 350px) {
            .header-title {
                font-size: 16px;
            }
            
            .toggle-btn {
                padding: 5px 8px;
                font-size: 11px;
            }
            
            .btn {
                padding: 10px 15px;
                font-size: 13px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
       
        <div class="success-message" id="successMessage">
            <button class="close-btn" onclick="hideSuccessMessage()">&times;</button>
            <div class="message-content">
                <span class="icon"><i class="fas fa-check-circle"></i></span>
                <span class="text">Relatório adicionado com sucesso!</span>
            </div>
        </div>

        <div class="header">
            <span class="back-arrow">←</span>
            <div class="title-section">
                <div class="menu-icon"><img src="imagem/Vector.relatorio.png" alt="menu-icon" height="30px"></div>
                <span class="title">RELATÓRIO FINANCEIRO</span>
            </div>
            <div><img src="imagem/logorel.png" alt="logo" img src="imagem/logorel.png" alt="logo" style="height: 40px; width: auto;"></div>
        </div> <br>

        <div class="tab-container">
            <div class="h1">Relatório Diário</div>
            <div class="tab active" onclick="switchTab('monthly')">Mensalidade</div>
            <div class="tab inactive" onclick="switchTab('daily')">Diário</div>
        </div>

        <div class="form-container">
            <form id="reportForm">
                <div class="form-group">
                    <label for="date">Data</label>
                    <input type="text" id="date" placeholder="dd/mm/aaaa" required>
                </div>

                <div class="form-group">
                    <label for="description">Descrição</label>
                    <input type="text" id="description" placeholder="Descreva a despesa" required>
                </div>

                <div class="form-group">
                    <label for="value">Valor (R$)</label>
                    <input type="text" id="value" placeholder="R$0,00" required>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-cancel" onclick="cancelForm()">Cancelar</button>
                    <button type="submit" class="btn btn-add" id="addBtn">Adicionar</button>
                </div>
            </form>
        </div>

        <div class="main-content">
            <input type="text" class="search-box" id="searchBox" placeholder="Buscar Relatório por despesa">

            <!-- Lista de relatórios -->
            <div class="reports-list" id="reportsList" style="display: none;">
                <h3 style="color: #4CAF50; margin-bottom: 15px; text-align: center;">
                    <i class="fas fa-search"></i> Resultados da Pesquisa
                </h3>
                <div id="searchResults"></div>
                <button class="btn btn-cancel" onclick="clearSearch()" style="margin: 20px auto; display: block; width: 200px;">
                    <i class="fas fa-times"></i> Limpar Pesquisa
                </button>
            </div>

            <div class="totals-container" id="totalsContainer">
                <div class="total-card total-recebido">
                    <div class="total-label">Total Recebido</div>
                    <div class="total-value" id="totalRecebido">R$ 0,00</div>
                </div>
                <div class="total-card total-pendente">
                    <div class="total-label">Total Pendente</div>
                    <div class="total-value" id="totalPendente">R$ 0,00</div>
                </div>
                <div class="total-card total-geral">
                    <div class="total-label">Total Geral</div>
                    <div class="total-value" id="totalGeral">R$ 0,00</div>
                </div>
            </div>

            <button class="history-btn" onclick="showAllReports()">
                <i class="fas fa-history"></i> HISTÓRICO DE MOVIMENTAÇÃO<br>
                COMPLETO (ASAS)
            </button>
        </div>

        <!-- Navegação em meia lua -->
        <div class="half-moon-nav">
            <div class="nav-item active">Início</div>
            <div class="nav-item" onclick="showAllReports()">Relatórios</div>
            <div class="nav-item">Configurações</div>
        </div>

        <!-- Modal de autenticação -->
        <div class="modal-overlay" id="authModal">
            <div class="modal">
                <div class="modal-header">
                    <h3 class="modal-title">Autenticação de Administrador</h3>
                    <button class="modal-close" onclick="closeAuthModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Para editar relatórios, é necessário autenticação de administrador.</p>
                    <input type="password" class="modal-input" id="adminPassword" placeholder="Digite a senha de administrador">
                    <div class="error-message" id="passwordError">Senha incorreta. Tente novamente.</div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-cancel" onclick="closeAuthModal()">Cancelar</button>
                    <button class="btn btn-add" onclick="verifyAdminPassword()">Verificar</button>
                </div>
            </div>
        </div>

        <!-- Modal de edição -->
        <div class="modal-overlay" id="editModal">
            <div class="modal">
                <div class="modal-header">
                    <h3 class="modal-title">Editar Relatório</h3>
                    <button class="modal-close" onclick="closeEditModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="editForm">
                        <input type="hidden" id="editId">
                        <div class="form-group">
                            <label for="editDate">Data</label>
                            <input type="text" id="editDate" class="modal-input" placeholder="dd/mm/aaaa" required>
                        </div>
                        <div class="form-group">
                            <label for="editDescription">Descrição</label>
                            <input type="text" id="editDescription" class="modal-input" placeholder="Descreva a despesa" required>
                        </div>
                        <div class="form-group">
                            <label for="editValue">Valor (R$)</label>
                            <input type="text" id="editValue" class="modal-input" placeholder="R$0,00" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-cancel" onclick="closeEditModal()">Cancelar</button>
                    <button class="btn btn-add" onclick="saveEditedReport()">Salvar Alterações</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Chave para armazenamento no localStorage
        const STORAGE_KEY = 'financialReports';
        const ADMIN_PASSWORD = "admin123"; // Senha do administrador (em um sistema real, isso deve ser mais seguro)
        
        // Carregar relatórios do localStorage ou usar array vazio
        let savedReports = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
        let currentReportToEdit = null;
        
        // Atualizar totais ao carregar a página
        updateTotals();

        // Função para salvar relatórios no localStorage
        function saveReportsToStorage() {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(savedReports));
            console.log('💾 Relatórios salvos no localStorage');
        }

        // Função para atualizar os totais exibidos
        function updateTotals() {
            let totalRecebido = 0;
            let totalPendente = 0;
            
            // Calcular totais (exemplo simplificado)
            // Em um sistema real, você teria lógica para diferenciar recebido vs pendente
            savedReports.forEach(report => {
                // Converter valor string para número (remover "R$ ", pontos e vírgula)
                const valorNumerico = parseFloat(
                    report.value.replace('R$ ', '')
                               .replace('.', '')
                               .replace(',', '.')
                );
                
                // Simulação: 50% recebido, 50% pendente
                totalRecebido += valorNumerico * 0.5;
                totalPendente += valorNumerico * 0.5;
            });
            
            const totalGeral = totalRecebido + totalPendente;
            
            // Formatar valores para exibição
            document.getElementById('totalRecebido').textContent = formatCurrency(totalRecebido);
            document.getElementById('totalPendente').textContent = formatCurrency(totalPendente);
            document.getElementById('totalGeral').textContent = formatCurrency(totalGeral);
        }

        // Função para formatar valor como moeda brasileira
        function formatCurrency(value) {
            return 'R$ ' + value.toFixed(2).replace('.', ',').replace(/\d(?=(\d{3})+,)/g, '$&.');
        }

        // Função para mostrar todos os relatórios
        function showAllReports() {
            if (savedReports.length === 0) {
                alert('Não há relatórios cadastrados.');
                return;
            }
            
            // Usar a função de pesquisa com string vazia para mostrar todos
            document.getElementById('searchBox').value = '';
            const results = searchReports('');
            toggleSearchMode(true);
            renderSearchResults(results, 'todos os relatórios');
        }

        // Função para buscar relatórios
        function searchReports(searchTerm) {
            if (!searchTerm || searchTerm.trim() === '') {
                // Se não há termo de busca, retorna todos os relatórios ordenados por data
                return [...savedReports].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            }

            const term = searchTerm.toLowerCase().trim();
            
            return savedReports.filter(report => {
                return report.description.toLowerCase().includes(term) ||
                       report.date.includes(term) ||
                       report.value.toLowerCase().includes(term) ||
                       report.type.toLowerCase().includes(term);
            }).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
        }

        // Função para destacar texto na pesquisa
        function highlightSearchTerm(text, searchTerm) {
            if (!searchTerm || searchTerm === 'todos os relatórios') return text;
            
            const regex = new RegExp(`(${searchTerm})`, 'gi');
            return text.replace(regex, '<span class="search-highlight">$1</span>');
        }

        // Função para renderizar resultados da pesquisa
        function renderSearchResults(results, searchTerm) {
            const resultsContainer = document.getElementById('searchResults');
            
            if (results.length === 0) {
                resultsContainer.innerHTML = `
                    <div class="no-results">
                        <i class="fas fa-search-minus"></i>
                        <h3>Nenhum relatório encontrado</h3>
                        <p>Não foram encontrados relatórios para "${searchTerm}"</p>
                        <p>Tente pesquisar por:</p>
                        <ul style="text-align: left; margin-top: 10px;">
                            <li>Nome da despesa</li>
                            <li>Data (dd/mm/aaaa)</li>
                            <li>Valor</li>
                            <li>Tipo de relatório</li>
                        </ul>
                    </div>
                `;
                return;
            }

            const resultsHTML = results.map(report => `
                <div class="report-item">
                    <button class="edit-btn" onclick="openEditReport(${report.id})" title="Editar relatório">
                        <i class="fas fa-edit"></i>
                    </button>
                    <div class="report-header">
                        <div class="report-description">
                            ${highlightSearchTerm(report.description, searchTerm)}
                        </div>
                        <div class="report-value">${highlightSearchTerm(report.value, searchTerm)}</div>
                    </div>
                    <div class="report-details">
                        <div>
                            <span class="report-date">
                                <i class="fas fa-calendar"></i> ${highlightSearchTerm(report.date, searchTerm)}
                            </span>
                            <span class="report-type">
                                <i class="fas fa-tag"></i> ${highlightSearchTerm(report.type, searchTerm)}
                            </span>
                        </div>
                        <div style="color: #999; font-size: 12px;">
                            ID: #${report.id}
                        </div>
                    </div>
                </div>
            `).join('');

            resultsContainer.innerHTML = `
                <div style="margin-bottom: 15px; color: #4CAF50; font-weight: bold;">
                    <i class="fas fa-check-circle"></i> 
                    ${results.length} resultado${results.length > 1 ? 's' : ''} encontrado${results.length > 1 ? 's' : ''} para "${searchTerm}"
                </div>
                ${resultsHTML}
            `;
        }

        // Função para mostrar/esconder elementos durante a pesquisa
        function toggleSearchMode(isSearching) {
            const reportsList = document.getElementById('reportsList');
            const totalsContainer = document.getElementById('totalsContainer');
            const historyBtn = document.querySelector('.history-btn');

            if (isSearching) {
                reportsList.style.display = 'block';
                totalsContainer.style.display = 'none';
                historyBtn.style.display = 'none';
            } else {
                reportsList.style.display = 'none';
                totalsContainer.style.display = 'flex';
                historyBtn.style.display = 'block';
            }
        }

        // Limpar pesquisa
        function clearSearch() {
            const searchBox = document.getElementById('searchBox');
            searchBox.value = '';
            toggleSearchMode(false);
            searchBox.focus();
        }

        // Adicionar relatório ao array e salvar no localStorage
        function addReportToArray(reportData) {
            savedReports.unshift(reportData);
            saveReportsToStorage();
            updateTotals();
            console.log(`📊 Relatório #${reportData.id} adicionado e salvo`);
        }

        // Mostrar mensagem de sucesso
        function showSuccessMessage(description, value) {
            const successMsg = document.getElementById('successMessage');
            const messageText = successMsg.querySelector('.text');
            
            const message = `✅ Relatório "${description}" no valor de ${value} foi adicionado com sucesso!`;
            messageText.textContent = message;
            
            successMsg.style.display = 'block';
            successMsg.classList.remove('fade-out');
            
            setTimeout(() => {
                hideSuccessMessage();
            }, 5000);
            
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        // Esconder mensagem de sucesso
        function hideSuccessMessage() {
            const successMsg = document.getElementById('successMessage');
            successMsg.classList.add('fade-out');
            setTimeout(() => {
                successMsg.style.display = 'none';
                successMsg.classList.remove('fade-out');
            }, 400);
        }

        // Limpar formulário
        function clearForm() {
            const form = document.getElementById('reportForm');
            form.reset();
            setCurrentDate();
            
            setTimeout(() => {
                document.getElementById('description').focus();
            }, 100);
        }

        // Definir data atual no campo de data
        function setCurrentDate() {
            const today = new Date();
            const day = String(today.getDate()).padStart(2, '0');
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const year = today.getFullYear();
            document.getElementById('date').value = `${day}/${month}/${year}`;
        }

        // Cancelar formulário
        function cancelForm() {
            if (confirm('Tem certeza que deseja cancelar? Todos os dados serão perdidos.')) {
                clearForm();
            }
        }

        // Alternar entre abas
        function switchTab(type) {
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.classList.remove('active');
                tab.classList.add('inactive');
            });
            
            if (type === 'monthly') {
                tabs[0].classList.add('active');
                tabs[0].classList.remove('inactive');
                document.querySelector('.h1').textContent = 'Relatório Mensal';
            } else {
                tabs[1].classList.add('active');
                tabs[1].classList.remove('inactive');
                document.querySelector('.h1').textContent = 'Relatório Diário';
            }
        }

        // Mostrar/ocultar loading no botão
        function showButtonLoading(show = true) {
            const btn = document.getElementById('addBtn');
            if (show) {
                btn.classList.add('loading');
                btn.disabled = true;
            } else {
                btn.classList.remove('loading');
                btn.disabled = false;
            }
        }

        // Formatar data durante a digitação
        document.getElementById('date').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length > 2 && value.length <= 4) {
                value = value.replace(/^(\d{2})(\d+)/, '$1/$2');
            } else if (value.length > 4) {
                value = value.replace(/^(\d{2})(\d{2})(\d+)/, '$1/$2/$3');
            }
            e.target.value = value;
        });

        // Formatar valor durante a digitação
        document.getElementById('value').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^\d]/g, '');
            if (value === '') {
                e.target.value = '';
                return;
            }
            
            value = (parseInt(value) / 100).toFixed(2);
            value = value.replace('.', ',');
            value = value.replace(/\d(?=(\d{3})+,)/g, '$&.');
            e.target.value = 'R$ ' + value;
        });

        // Manipular envio do formulário
        document.getElementById('reportForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const date = document.getElementById('date').value;
            const description = document.getElementById('description').value;
            const value = document.getElementById('value').value;
            
            // Validação
            if (!date || !description || !value) {
                alert('Por favor, preencha todos os campos!');
                return;
            }

            if (!/^\d{2}\/\d{2}\/\d{4}$/.test(date)) {
                alert('Por favor, insira uma data válida no formato dd/mm/aaaa');
                document.getElementById('date').focus();
                return;
            }
            
            showButtonLoading(true);
           
            setTimeout(() => {
                const reportData = {
                    id: Date.now(), 
                    date: date,
                    description: description.trim(),
                    value: value,
                    timestamp: new Date().toISOString(),
                    type: document.querySelector('.h1').textContent 
                };
                
                addReportToArray(reportData);
                console.log('📊 Novo relatório criado:', reportData);
                
                showButtonLoading(false);
                showSuccessMessage(description.trim(), value);
                clearForm();
                
            }, 1000); 
        });

        // Inicialização quando o documento estiver carregado
        document.addEventListener('DOMContentLoaded', function() {
            setCurrentDate();
            document.getElementById('description').focus();
            
            const searchBox = document.getElementById('searchBox');
            let searchTimeout;

            // Configurar pesquisa em tempo real
            searchBox.addEventListener('input', function(e) {
                const searchTerm = e.target.value.trim();
                clearTimeout(searchTimeout);
                
                searchTimeout = setTimeout(() => {
                    if (searchTerm === '') {
                        toggleSearchMode(false);
                        return;
                    }

                    const results = searchReports(searchTerm);
                    toggleSearchMode(true);
                    renderSearchResults(results, searchTerm);
                    
                }, 300);
            });

            // Tecla ESC limpa a pesquisa
            searchBox.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    clearSearch();
                }
            });
            
            console.log('📱 Aplicativo iniciado - Formulário pronto para uso');
            console.log(`💾 ${savedReports.length} relatórios carregados do localStorage`);
        });

        // Navegação
        document.querySelectorAll('.nav-item').forEach((item, index) => {
            item.addEventListener('click', function() {
                document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Atalhos de teclado
        document.addEventListener('keydown', function(e) {
            // Ctrl+Enter envia o formulário
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('reportForm').dispatchEvent(new Event('submit'));
            }
            
            // ESC cancela o formulário
            if (e.key === 'Escape') {
                cancelForm();
            }
        });

        // Efeitos visuais nos inputs
        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('focus', function() {
                this.style.borderColor = '#4CAF50';
                this.style.boxShadow = '0 0 5px rgba(76, 175, 80, 0.3)';
            });
            
            input.addEventListener('blur', function() {
                this.style.borderColor = '#ddd';
                this.style.boxShadow = 'none';
            });
        });

        // Funções para edição de relatórios
        function openEditReport(reportId) {
            // Encontrar o relatório pelo ID
            const report = savedReports.find(r => r.id === reportId);
            if (!report) {
                alert('Relatório não encontrado!');
                return;
            }
            
            currentReportToEdit = report;
            openAuthModal();
        }

        function openAuthModal() {
            document.getElementById('authModal').classList.add('active');
            document.getElementById('adminPassword').value = '';
            document.getElementById('passwordError').classList.remove('show');
            document.getElementById('adminPassword').focus();
        }

        function closeAuthModal() {
            document.getElementById('authModal').classList.remove('active');
            currentReportToEdit = null;
        }

        function verifyAdminPassword() {
            const password = document.getElementById('adminPassword').value;
            const errorElement = document.getElementById('passwordError');
            
            if (password === ADMIN_PASSWORD) {
                errorElement.classList.remove('show');
                closeAuthModal();
                openEditModal();
            } else {
                errorElement.classList.add('show');
                document.getElementById('adminPassword').focus();
            }
        }

        function openEditModal() {
            if (!currentReportToEdit) return;
            
            // Preencher o formulário de edição com os dados atuais
            document.getElementById('editId').value = currentReportToEdit.id;
            document.getElementById('editDate').value = currentReportToEdit.date;
            document.getElementById('editDescription').value = currentReportToEdit.description;
            document.getElementById('editValue').value = currentReportToEdit.value;
            
            document.getElementById('editModal').classList.add('active');
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.remove('active');
            currentReportToEdit = null;
        }

        function saveEditedReport() {
            const id = parseInt(document.getElementById('editId').value);
            const date = document.getElementById('editDate').value;
            const description = document.getElementById('editDescription').value;
            const value = document.getElementById('editValue').value;
            
            // Validação
            if (!date || !description || !value) {
                alert('Por favor, preencha todos os campos!');
                return;
            }

            if (!/^\d{2}\/\d{2}\/\d{4}$/.test(date)) {
                alert('Por favor, insira uma data válida no formato dd/mm/aaaa');
                document.getElementById('editDate').focus();
                return;
            }
            
            // Encontrar o índice do relatório no array
            const reportIndex = savedReports.findIndex(r => r.id === id);
            if (reportIndex === -1) {
                alert('Relatório não encontrado!');
                closeEditModal();
                return;
            }
            
            // Atualizar o relatório
            savedReports[reportIndex] = {
                ...savedReports[reportIndex],
                date: date,
                description: description.trim(),
                value: value,
                timestamp: new Date().toISOString() // Atualizar timestamp da edição
            };
            
            // Salvar no localStorage
            saveReportsToStorage();
            updateTotals();
            
            // Atualizar a exibição se estiver em modo de pesquisa
            const searchTerm = document.getElementById('searchBox').value.trim();
            if (searchTerm !== '') {
                const results = searchReports(searchTerm);
                renderSearchResults(results, searchTerm);
            }
            
            alert('Relatório atualizado com sucesso!');
            closeEditModal();
        }

        // Permitir enviar o formulário de autenticação com Enter
        document.getElementById('adminPassword').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                verifyAdminPassword();
            }
        });

        
        document.getElementById('editForm').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveEditedReport();
            }
        });
    </script>
</body>
</html>