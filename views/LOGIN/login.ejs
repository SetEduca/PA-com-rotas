<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        /* --- Fontes --- */
        @import url('https://fonts.googleapis.com/css2?family=Konkhmer+Sleokchher&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Kodchasan:wght@400;600&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Allerta&display=swap');

        /* --- Configuração Geral --- */
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Allerta', sans-serif;
            overflow-x: hidden;
            background-color: #FFFFFF;
        }

        .main-container {
            display: flex;
            width: 100%;
            height: 100vh;
        }

        /* --- Painel Esquerdo (Imagem) --- */
        .left-panel {
            flex: 1;
            max-width: 50%;
            height: 100%; /* Garante altura total */
        }

        .left-panel img {
            width: 100%;
            height: 100%;
            object-fit: cover; /* Cobre o espaço sem distorcer */
        }

        /* --- Painel Direito (Formulário de Login) --- */
        .right-panel {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 40px;
            box-sizing: border-box;
            height: 100%; /* Garante altura total */
            overflow-y: auto; /* Permite scroll se necessário */
        }

        .login-container {
            max-width: 520px;
            width: 100%;
        }

        .login-container h1 {
            font-family: 'Konkhmer Sleokchher', cursive;
            font-size: 3.5rem;
            font-weight: 400;
            margin: 0;
            color: #000000;
        }

        .login-container h2 {
            font-family: 'Kodchasan', sans-serif;
            font-size: 1.25rem;
            font-weight: 400;
            color: #555555;
            margin-bottom: 40px;
        }
        
        /* --- Estilos do Formulário --- */
        .form-group {
            margin-bottom: 28px;
            position: relative;
        }

        .form-group label {
            font-family: 'Kodchasan', sans-serif;
            font-weight: 600;
            font-size: 1rem;
            color: #838181;
            margin-bottom: 8px;
            display: block;
        }

        .form-group input {
            width: 100%;
            height: 65px;
            border-radius: 12px;
            border: 1px solid #DCDCDC;
            background-color: #FFF9E8;
            padding: 0 20px; /* Padding ajustado */
            font-size: 1rem;
            box-sizing: border-box;
            color: #3B3B3B;
            /* Remove padding extra quando há ícone */
            padding-right: 50px; /* Espaço para o ícone do olho */
        }
        /* Ajuste específico para o campo de email que não tem ícone */
        .form-group input[type="email"] {
             padding-right: 20px;
        }


        .form-group input::placeholder {
            color: #A0A0A0;
        }
         .form-group input:focus {
             outline: none;
             border-color: #fcdc6a; /* Cor de foco */
             box-shadow: 0 0 0 3px rgba(252, 220, 106, 0.4);
         }


        .password-wrapper {
            position: relative;
            display: flex; /* Mantido flex por causa do ícone */
            align-items: center; /* Alinha input e ícone */
        }
        /* Input dentro do wrapper ocupa toda a largura */
        .password-wrapper input {
             width: 100%;
        }


        .toggle-password { /* Ícone do olho */
            position: absolute;
            right: 20px;
            top: 50%; /* Centraliza verticalmente */
            transform: translateY(-50%); /* Ajuste fino da centralização */
            cursor: pointer;
            color: #838181;
            font-size: 1.1rem; /* Tamanho do ícone */
        }

        .form-links {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
            margin-top: 15px; /* Reduzido um pouco */
            color: #838181;
            flex-wrap: wrap; /* Permite quebrar linha em telas pequenas */
            gap: 10px; /* Espaço entre os links se quebrar linha */
        }

        .form-links a {
            color: #00A6FF; /* Azul para links */
            text-decoration: none;
            font-weight: bold;
        }

        .form-links a:hover {
            text-decoration: underline;
        }

        .form-links p a { /* Link dentro do "Não é cadastrado?" */
            color: #FFC72C; /* Amarelo */
        }

        #submit-btn {
            display: block; /* Ocupa linha inteira */
            text-decoration: none;
            text-align: center;
            /* line-height removido, padding controla altura */
            width: 100%;
            /* height removido */
            padding: 18px 0; /* Padding vertical controla altura */
            border-radius: 30px; /* Bordas arredondadas */
            border: 1px solid #E0B400;
            background-color: #fcdc6a; /* Amarelo */
            font-size: 1.2rem;
            font-weight: bold;
            font-family: 'Kodchasan', sans-serif;
            cursor: pointer;
            margin-top: 35px;
            color: #000;
            box-sizing: border-box;
            transition: background-color 0.3s ease, transform 0.1s ease;
        }
         #submit-btn:hover {
             background-color: #e9c65a; /* Amarelo mais escuro */
         }
         #submit-btn:active {
            transform: scale(0.98); /* Efeito de clique */
         }


        /* Mensagens de Erro/Sucesso (Vindas do Backend via EJS) */
        .error-message, .success-message {
            font-family: 'Allerta', sans-serif;
            font-size: 0.9rem;
            font-weight: bold;
            margin-top: 10px;
            padding: 12px 15px; /* Padding ajustado */
            border-radius: 8px; /* Borda mais suave */
            margin-bottom: 20px; /* Espaço abaixo da mensagem */
            display: flex; /* Para alinhar ícone e texto */
            align-items: center;
            gap: 10px; /* Espaço entre ícone e texto */
        }

        .error-message {
            color: #721c24; /* Texto vermelho escuro */
            background-color: #f8d7da; /* Fundo rosa claro */
            border: 1px solid #f5c6cb; /* Borda rosa */
        }
         .error-message i { color: #dc3545; } /* Ícone vermelho */

        .success-message {
            color: #155724; /* Texto verde escuro */
            background-color: #d4edda; /* Fundo verde claro */
            border: 1px solid #c3e6cb; /* Borda verde */
        }
        .success-message i { color: #28a745; } /* Ícone verde */


        /* --- MODAL DE RECUPERAÇÃO DE SENHA --- */
        .modal-overlay {
            display: none; /* Começa escondido */
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.6); /* Fundo mais escuro */
            z-index: 1000;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(4px); /* Efeito de desfoque */
        }

        .modal-overlay.active {
            display: flex; /* Mostra o modal */
        }

        .modal-content {
            background-color: #FFFFFF;
            border-radius: 20px;
            padding: 40px;
            max-width: 520px;
            width: 90%;
            max-height: 90vh; /* Limita altura */
            overflow-y: auto; /* Scroll se necessário */
            position: relative;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            animation: modalFadeIn 0.3s ease-out; /* Animação */
        }
         @keyframes modalFadeIn {
             from { opacity: 0; transform: translateY(-20px); }
             to { opacity: 1; transform: translateY(0); }
         }


        .modal-close {
            position: absolute;
            top: 15px; /* Mais perto do topo */
            right: 15px; /* Mais perto da borda */
            font-size: 1.8rem; /* Ícone maior */
            cursor: pointer;
            color: #aaa; /* Cinza claro */
            background: none;
            border: none;
            line-height: 1; /* Alinhamento vertical */
            padding: 5px; /* Área de clique maior */
        }

        .modal-close:hover {
            color: #333; /* Cor mais escura no hover */
        }

        .modal-content h3 {
            font-family: 'Konkhmer Sleokchher', cursive;
            font-size: 2.5rem;
            font-weight: 400;
            margin: 0 0 10px 0;
            color: #000000;
            text-align: center; /* Centraliza título */
        }

        .modal-content p {
            font-family: 'Kodchasan', sans-serif;
            font-size: 1rem;
            color: #555555;
            margin-bottom: 30px;
            text-align: center; /* Centraliza parágrafo */
        }

        .recovery-step { display: none; }
        .recovery-step.active { display: block; }

        /* Botão dentro do modal */
        .modal-content .submit-btn {
            /* Usa o mesmo estilo do botão de login */
             display: block;
             text-decoration: none;
             text-align: center;
             width: 100%;
             padding: 18px 0;
             border-radius: 30px;
             border: 1px solid #E0B400;
             background-color: #fcdc6a;
             font-size: 1.2rem;
             font-weight: bold;
             font-family: 'Kodchasan', sans-serif;
             cursor: pointer;
             margin-top: 25px; /* Espaçamento ajustado */
             color: #000;
             box-sizing: border-box;
             transition: background-color 0.3s ease, transform 0.1s ease;
        }
        .modal-content .submit-btn:hover { background-color: #e9c65a; }
        .modal-content .submit-btn:active { transform: scale(0.98); }


        .modal-content .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            background-color: #e9ecef;
            border-color: #ced4da;
        }

        .modal-links {
            text-align: center;
            margin-top: 20px;
            font-size: 0.9rem;
        }

        .modal-links a {
            color: #00A6FF;
            text-decoration: none;
            font-weight: bold;
        }

        .modal-links a:hover {
            text-decoration: underline;
        }
        /* Div para mensagens dentro do modal */
        #modalMessage {
             margin-bottom: 20px; /* Espaço abaixo da mensagem */
             min-height: 40px; /* Altura mínima para evitar pulos */
        }


        /* --- Responsividade --- */
        @media (max-width: 992px) {
            .left-panel {
                display: none; /* Esconde imagem em telas médias/pequenas */
            }
            .right-panel {
                flex-basis: 100%;
                max-width: 100%;
                padding-top: 4rem; /* Mais espaço no topo */
                justify-content: flex-start; /* Alinha no topo */
                 height: auto; /* Altura automática */
                 min-height: 100vh; /* Garante que ocupe a tela */
            }
        }

        @media (max-width: 576px) {
            .login-container h1 {
                font-size: 2.8rem;
                text-align: center;
            }
            .login-container h2 {
                font-size: 1.1rem;
                text-align: center;
                margin-bottom: 30px;
            }
            .right-panel {
                padding: 3rem 1.5rem; /* Menos padding lateral */
            }
            .modal-content {
                padding: 30px 20px; /* Menos padding no modal */
            }
            .modal-content h3 {
                font-size: 2rem;
            }
             .form-links {
                 flex-direction: column; /* Empilha os links */
                 align-items: center;
                 gap: 15px;
             }
        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="left-panel">
            <img src="/imagem/BV.svg" alt="Banner de boas-vindas com ilustrações infantis">
        </div>

        <div class="right-panel">
            <div class="login-container">
                <h1>Login</h1>
                <h2>Sentimos falta de você!</h2>



 <form id="meuform" method="POST" action="/login">
    
    <!-- Seus campos de usuário e senha ficam aqui -->
    <label for="username" class="label">Usuário ou e-mail</label><br>
    <input type="text" id="username" name="username" placeholder="Digite seu usuário ou e-mail" required><br><br><br><br>

    <label for="password" class="labe">Senha</label><br>
    <input type="password" id="password" name="password" placeholder="Digite sua senha" required><br><br>

                <form id="loginForm">

                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i> <%= error %>
                    </div>
                <% } %>
                <% if (typeof success !== 'undefined' && success) { %>
                    <div class="success-message">
                        <i class="fas fa-check-circle"></i> <%= success %>
                    </div>
                    <script>
                        // Opcional: Esconder a mensagem de sucesso após alguns segundos
                        setTimeout(() => {
                            const successDiv = document.querySelector('.success-message');
                            if (successDiv) successDiv.style.display = 'none';
                        }, 5000); // Esconde após 5 segundos
                    </script>
                <% } %>
                <form id="loginForm" method="POST" action="/login">

                    <div class="form-group">
                        <label for="email">E-mail</label>
                        <input type="email" id="email" name="email" placeholder="Digite seu e-mail" required>
                    </div>

                    <div class="form-group">
                        <label for="password">Senha</label>
                        <div class="password-wrapper">
                            <input type="password" id="password" name="password" placeholder="Digite sua senha" required>
                            <i class="fas fa-eye toggle-password" data-target="password"></i>
                        </div>
                    </div>
                    
                    <div class="form-links">
                        <p>Não é cadastrado? <a href="/cadastro">Cadastro</a></p>
                        <a href="#" id="forgot-password-link">Esqueceu a senha?</a>
                    </div>


                    <button type="submit" id="submit-btn">Entrar</button>
                </form>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="recoveryModal">
        <div class="modal-content">
            <button class="modal-close" id="closeModal">&times;</button>
            
            <div id="modalMessage"></div> 


        <button htype="submit" id="sub">Entrar</button>
    </form>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
</body>

            <div id="step1" class="recovery-step active">
                <h3>Recuperar Senha</h3>
                <p>Digite seu e-mail para receber o código de verificação.</p>
                <form id="emailForm">
                    <div class="form-group">
                        <label for="recoveryEmail">E-mail</label>
                        <input type="email" id="recoveryEmail" name="recoveryEmail" placeholder="Digite seu e-mail cadastrado" required>
                    </div>
                    <button type="submit" class="submit-btn">Enviar Código</button>
                </form>
            </div>

            <div id="step2" class="recovery-step">
                <h3>Código Enviado</h3>
                <p>Digite o código de 6 dígitos enviado para o seu e-mail.</p>
                <form id="codeForm">
                    <div class="form-group">
                        <label for="verificationCode">Código de Verificação</label>
                        <input type="text" id="verificationCode" name="verificationCode" placeholder="Digite o código" required maxlength="6" pattern="\d{6}">
                    </div>
                    <button type="submit" class="submit-btn">Verificar Código</button>
                    <div class="modal-links">
                        <a href="#" id="resendCode">Reenviar código</a>
                    </div>
                </form>
            </div>

            <div id="step3" class="recovery-step">
                <h3>Nova Senha</h3>
                <p>Crie uma nova senha para sua conta.</p>
                <form id="passwordForm">
                    <div class="form-group">
                        <label for="newPassword">Nova Senha</label>
                        <div class="password-wrapper">
                            <input type="password" id="newPassword" name="newPassword" placeholder="Mínimo 6 caracteres" required>
                            <i class="fas fa-eye toggle-password" data-target="newPassword"></i>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Confirmar Nova Senha</label>
                        <div class="password-wrapper">
                            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirme sua nova senha" required>
                            <i class="fas fa-eye toggle-password" data-target="confirmPassword"></i>
                        </div>
                         <div class="password-error-message" id="modal-password-error"></div>
                    </div>
                    <button type="submit" class="submit-btn">Redefinir Senha</button>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Toggle password visibility (para todos os campos de senha)
            document.querySelectorAll('.toggle-password').forEach(icon => {
                icon.addEventListener('click', function () {
                    const targetId = this.dataset.target;
                    const input = document.getElementById(targetId);
                    if (input) {
                        const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                        input.setAttribute('type', type);
                        // Alterna entre olho aberto e fechado
                        this.classList.toggle('fa-eye');
                        this.classList.toggle('fa-eye-slash');
                    }
                });
            });

            // --- Lógica do Modal "Esqueceu a Senha?" ---
            const modal = document.getElementById('recoveryModal');
            const forgotPasswordLink = document.getElementById('forgot-password-link');
            const closeModalBtn = document.getElementById('closeModal');
            let currentEmail = ''; // Armazena o email entre os passos
            // Removido: let currentCode = ''; // Não precisamos mais guardar o código no JS

            // Função para ABRIR o modal
            forgotPasswordLink?.addEventListener('click', (e) => {
                e.preventDefault();
                modal.classList.add('active');
                resetModal(); // Garante que começa no passo 1
            });

            // Função para FECHAR o modal (botão X e clique fora)
            const closeModal = () => {
                modal.classList.remove('active');
            };
            closeModalBtn?.addEventListener('click', closeModal);
            modal?.addEventListener('click', (e) => {
                if (e.target === modal) { // Fecha só se clicar no fundo cinza
                    closeModal();
                }
            });

            // Funções auxiliares do modal
            const showStep = (step) => {
                document.querySelectorAll('.recovery-step').forEach(s => s.classList.remove('active'));
                const stepElement = document.getElementById(`step${step}`);
                 if (stepElement) stepElement.classList.add('active');
                clearMessages(); // Limpa mensagens ao trocar de passo
            };

            const showMessage = (message, type = 'error', target = 'modalMessage') => {
                 const messageDiv = document.getElementById(target);
                 if (!messageDiv) return;
                 // Adiciona ícone apropriado
                 const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
                 messageDiv.innerHTML = `<div class="${type}-message"><i class="fas ${iconClass}"></i> ${message}</div>`;
             };

            const clearMessages = () => {
                const modalMsg = document.getElementById('modalMessage');
                const modalPwdErr = document.getElementById('modal-password-error');
                 if(modalMsg) modalMsg.innerHTML = '';
                 if(modalPwdErr) modalPwdErr.innerHTML = '';
            };

            const resetModal = () => {
                showStep(1);
                document.getElementById('emailForm')?.reset();
                document.getElementById('codeForm')?.reset();
                document.getElementById('passwordForm')?.reset();
                currentEmail = '';
                // Habilita botões caso tenham sido desabilitados
                 enableButton(document.getElementById('emailForm'));
                 enableButton(document.getElementById('codeForm'));
                 enableButton(document.getElementById('passwordForm'));
            };

            const disableButton = (form) => {
                const button = form?.querySelector('button[type="submit"]');
                if (button) button.disabled = true;
            };

            const enableButton = (form) => {
                const button = form?.querySelector('button[type="submit"]');
                if (button) button.disabled = false;
            };


             // --- Event Listeners dos Formulários do Modal ---

             // Passo 1: Enviar E-mail
             document.getElementById('emailForm')?.addEventListener('submit', async (e) => {
                 e.preventDefault();
                 const form = e.target;
                 disableButton(form);
                 clearMessages();
                 const emailInput = document.getElementById('recoveryEmail');
                 const email = emailInput?.value;
                 currentEmail = email; // Guarda o email

                 if (!email) {
                     showMessage('Por favor, digite seu e-mail.');
                     enableButton(form);
                     return;
                 }

                 try {
                     showMessage('Enviando código...', 'success'); // Feedback visual
                     // -------> CHAME SUA API DE BACKEND AQUI PARA ENVIAR O CÓDIGO <-------
                     // Exemplo:
                     // const response = await fetch('/api/auth/send-reset-code', {
                     //     method: 'POST',
                     //     headers: { 'Content-Type': 'application/json' },
                     //     body: JSON.stringify({ email })
                     // });
                     // const data = await response.json();
                     // if (!response.ok) throw new Error(data.message || 'Falha ao enviar código.');

                     // Simulação de sucesso (REMOVA ISSO e use a chamada real acima)
                      await new Promise(resolve => setTimeout(resolve, 1500)); // Simula espera
                     console.log("Simulando envio de código para:", email);
                     // ---------------------------------------------------------------------

                     showMessage('Código enviado! Verifique seu e-mail.', 'success');
                     setTimeout(() => showStep(2), 1500); // Avança para o passo 2

                 } catch (error) {
                     console.error("Erro ao enviar código:", error);
                     showMessage(error.message || 'Não foi possível enviar o código. Verifique o e-mail ou tente mais tarde.');
                 } finally {
                     enableButton(form); // Reabilita o botão
                 }
             });


             // Passo 2: Verificar Código
             document.getElementById('codeForm')?.addEventListener('submit', async (e) => {
                 e.preventDefault();
                 const form = e.target;
                 disableButton(form);
                 clearMessages();
                 const codeInput = document.getElementById('verificationCode');
                 const code = codeInput?.value;

                 if (!code || code.length !== 6) {
                     showMessage('Digite o código de 6 dígitos.');
                     enableButton(form);
                     return;
                 }

                 try {
                     showMessage('Verificando código...', 'success');
                     // -------> CHAME SUA API DE BACKEND AQUI PARA VALIDAR O CÓDIGO <-------
                     // Exemplo:
                     // const response = await fetch('/api/auth/verify-reset-code', {
                     //     method: 'POST',
                     //     headers: { 'Content-Type': 'application/json' },
                     //     body: JSON.stringify({ email: currentEmail, code })
                     // });
                     // const data = await response.json();
                     // if (!response.ok) throw new Error(data.message || 'Código inválido ou expirado.');

                     // Simulação de sucesso (REMOVA ISSO)
                      await new Promise(resolve => setTimeout(resolve, 1500));
                     console.log("Simulando verificação de código:", code, "para email:", currentEmail);
                     // -------------------------------------------------------------------------

                     showMessage('Código verificado!', 'success');
                     setTimeout(() => showStep(3), 1500); // Avança para o passo 3

                 } catch (error) {
                     console.error("Erro ao verificar código:", error);
                     showMessage(error.message || 'Código inválido ou expirado. Tente reenviar.');
                 } finally {
                     enableButton(form);
                 }
             });


             // Passo 3: Redefinir Senha
             document.getElementById('passwordForm')?.addEventListener('submit', async (e) => {
                 e.preventDefault();
                 const form = e.target;
                 disableButton(form);
                 clearMessages();
                 const newPasswordInput = document.getElementById('newPassword');
                 const confirmPasswordInput = document.getElementById('confirmPassword');
                 const newPassword = newPasswordInput?.value;
                 const confirmPassword = confirmPasswordInput?.value;

                 // Validações
                 if (!newPassword || !confirmPassword) {
                     showMessage('Preencha ambos os campos de senha.', 'error', 'modal-password-error');
                     enableButton(form); return;
                 }
                 if (newPassword !== confirmPassword) {
                     showMessage('As senhas não coincidem.', 'error', 'modal-password-error');
                      confirmPasswordInput.classList.add('error'); // Adiciona estilo de erro
                     enableButton(form); return;
                 } else {
                      confirmPasswordInput.classList.remove('error'); // Remove estilo de erro
                 }
                 if (newPassword.length < 6) { // Ou sua regra de validação
                     showMessage('A senha deve ter pelo menos 6 caracteres.', 'error', 'modal-password-error');
                     enableButton(form); return;
                 }


                 try {
                     showMessage('Redefinindo senha...', 'success');
                     // -------> CHAME SUA API DE BACKEND AQUI PARA REDEFINIR A SENHA <-------
                     // Geralmente envia o email, o código validado (ou um token) e a nova senha
                     // Exemplo:
                     // const response = await fetch('/api/auth/reset-password', {
                     //     method: 'POST',
                     //     headers: { 'Content-Type': 'application/json' },
                     //     body: JSON.stringify({ email: currentEmail, code: /* código validado ou token */, newPassword })
                     // });
                     // const data = await response.json();
                     // if (!response.ok) throw new Error(data.message || 'Não foi possível redefinir a senha.');

                      // Simulação de sucesso (REMOVA ISSO)
                      await new Promise(resolve => setTimeout(resolve, 1500));
                     console.log("Simulando redefinição de senha para:", currentEmail);
                     // -------------------------------------------------------------------------

                     showMessage('Senha redefinida com sucesso! Você já pode fazer login.', 'success');
                     setTimeout(closeModal, 3000); // Fecha o modal após 3 segundos

                 } catch (error) {
                     console.error("Erro ao redefinir senha:", error);
                     showMessage(error.message || 'Não foi possível redefinir a senha. Tente o processo novamente.');
                     // Não reabilita o botão aqui, força recomeçar se der erro grave
                      setTimeout(resetModal, 3000); // Volta ao passo 1 após erro
                 }
                 // 'finally' não é usado aqui intencionalmente em caso de erro, para forçar recomeçar
             });

            // Link "Reenviar Código"
            document.getElementById('resendCode')?.addEventListener('click', (e) => {
                 e.preventDefault();
                 // Simplesmente volta ao passo 1 e preenche o email
                 showStep(1);
                 const emailInput = document.getElementById('recoveryEmail');
                 if (emailInput) emailInput.value = currentEmail;
                 // O usuário precisará clicar em "Enviar Código" novamente
                 showMessage('Digite seu e-mail e clique em "Enviar Código" para reenviar.', 'success');
             });


        }); // Fim do DOMContentLoaded
    </script>
</body>
</html>

