<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sete Educa - Crianças Arquivadas</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
    
        .logo {
            padding: 0px 40px;
            text-align: center;
            margin-bottom: 25px;
            margin-top: 30px;
        }

        .logo img {
            max-width: 100%;
            height: auto;
        }
        
        .main-content { 
            flex: 1; 
            min-height: 100vh; 
            display: flex;
            flex-direction: column;
        }

        .header {
            background-color: #fade939f;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 15px;
            font-size: 35px;
            font-weight: 550;
            color: #2c3e50;
        }

        .header-left .user-icon {
            width: 60px;
            height: auto;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        /* Adicionando estilos para as novas imagens de ícone */
        .header-icon {
            width: 50px; /* Tamanho dos ícones */
            height: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .header-icon:hover {
            transform: scale(1.1);
        }
        
        /* Perfil do Usuário e Dropdown - CÓDIGO NOVO */
        .profile {
            position: relative;
            cursor: pointer;
            z-index: 10;
        }
        
        /* NOVO CSS ADICIONADO PARA O PERFIL */
        .profile-header {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 0 10px; 
            border-radius: 25px; /* Arredondado por padrão */
            background-color: transparent; 
            /* CORREÇÃO: Adicionando transição para o border-radius */
            transition: background-color 0.3s ease, border-radius 0.3s ease;
        }
        
        /* CORREÇÃO DE HOVER: Aplica o formato quadrado e a cor no hover */
        .profile-header:hover {
            background-color: #55555521; /* Exemplo de fundo suave no hover */
            border-radius: 8px; /* Mais quadrado no hover, conforme solicitado */
        }
        
        .profile-icon {
            font-size: 43px; 
            color: #000000;
        }
        
        .profile-arrow {
            font-size: 14px; 
            color: #2c3e50;
            transition: transform 0.3s ease;
        }
        
        /* Mudar a cor do ícone e da seta no hover para dar destaque */
        .profile-header:hover .profile-icon,
        .profile-header:hover .profile-arrow {
           
        }

        .profile.active .profile-arrow {
            transform: rotate(180deg);
        }
        /* FIM NOVO CSS */

        /* Garante que o ícone ainda tenha o tamanho correto quando envolvido por .profile */
        .profile .header-icon {
            margin: 0;
            /* Remove a margem extra se houver */
        }

        .profile-dropdown {
            position: absolute;
            top: 100%; /* Posiciona abaixo do ícone */
            right: 0;
            background-color: white;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            overflow: hidden;
            min-width: 200px;
            display: none; /* Escondido por padrão */
            padding: 10px 0;
            margin-top: 10px; /* Espaço entre o ícone e o dropdown */
        }
        
        .profile-dropdown a {
            color: #333;
            padding: 12px 16px;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 14px;
            transition: background-color 0.3s;
        }

        .profile-dropdown a:hover {
            background-color: #f1f1f1;
            color: #f0ad4e;
        }

        .dropdown-divider {
            height: 1px;
            margin: 8px 0;
            overflow: hidden;
            background-color: #e9ecef;
        }
        /* FIM CÓDIGO NOVO */

        .content-area { 
            /* Espaçamento superior reduzido (40px) */
            padding: 40px 175px 175px 175px; 
            background: url(imagem/ChatGPT\ Image\ 22_09_2025\,\ 17_12_14.png) no-repeat center center fixed; 
            background-size: cover;
            flex: 1;
            width: 100%;
            min-height: 100vh;
        }

        .search-section { 
            display: flex; 
            align-items: center; 
            justify-content: space-between; 
            margin-bottom: 30px; 
            gap: 20px; 
        }

        .search-container { 
            position: relative; 
            /* Largura da caixa de pesquisa: 300px */
            width: 300px; 
        }

        .search-input { 
            width: 100%; 
            height: 50px; 
            background: white; 
            border: 2px solid #ddd; 
            border-radius: 25px; 
            padding: 0 20px 0 50px; 
            font-size: 16px; 
            color: #666; 
            outline: none; 
        }

        .search-input:focus {
            border-color: #f0ad4e;
            box-shadow: 0 0 0 3px rgba(240, 173, 78, 0.1);
        }

        .search-icon { 
            position: absolute; 
            left: 18px; 
            top: 50%; 
            transform: translateY(-50%); 
            color: #999; 
            font-size: 18px; 
        }

        .stats-info { 
            text-align: right; 
            color: #333; 
            font-size: 18px; 
            font-weight: 600; 
            flex-shrink: 0; 
        }
        
        /* Torna o total de crianças arquivadas mais aparente */
        #totalArquivadas {
            font-size: 22px; 
            color: #000000; 
            font-weight: 700;
        }
        
        .table-container { 
            background: white; 
            border-radius: 12px; 
            border-top: 5px solid #f0ad4e; 
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); 
            overflow: hidden; 
        }

        .table { 
            width: 100%; 
            border-collapse: collapse; 
        }

        .table-header { 
            background: #f8f9fa; 
            color: #666; 
            font-weight: 600; 
            font-size: 14px; 
            text-transform: uppercase; 
        }

        .table th, .table td { 
            padding: 20px; 
            text-align: center; 
            border-bottom: 1px solid #eee; 
        }

        /* Alinha a 2ª coluna (Nome da Criança) no centro */
        .table th:nth-child(2),
        .table td:nth-child(2) {
            text-align: center; 
        }
        
        .table td:nth-child(2) {
            font-weight: 600; 
        }

        .avatar-cell {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .student-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, #f0ad4e, #ec971f);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 18px;
        }

        .operations { 
            display: flex; 
            justify-content: center; 
            align-items: center;
            gap: 8px; 
            min-width: 200px;
        }

        .btn-action { 
            display: inline-flex; 
            align-items: center; 
            justify-content: center;
            gap: 6px; 
            padding: 10px 14px; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer; 
            font-size: 13px; 
            font-weight: 600; 
            text-decoration: none; 
            transition: all 0.3s ease; 
            white-space: nowrap;
            min-width: 0;
            flex: 0 0 auto;
        }

        .btn-action i {
            font-size: 14px;
        }

        .btn-view { 
            background: #e8f5e8; 
            color: #2e7d32;
            border: 2px solid #c8e6c9;
        }

        .btn-view:hover { 
            background: #c8e6c9;
            transform: translateY(-2-px);
            box-shadow: 0 4px 8px rgba(46, 125, 50, 0.2);
        }

        .btn-unarchive { 
            background: #e3f2fd; 
            color: #1565c0;
            border: 2px solid #bbdefb;
        }

        .btn-unarchive:hover { 
            background: #bbdefb;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(21, 101, 192, 0.2);
        }
        
        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .status-ativo { 
            background: linear-gradient(135deg, #d4edda, #c3e6cb); 
            color: #155724; 
            border: 1px solid #c3e6cb;
        }
        
        .status-pendente { 
            background: linear-gradient(135deg, #fff3cd, #ffeaa7); 
            color: #856404; 
            border: 1px solid #ffeaa7;
        }
        
        .status-inativo { 
            background: linear-gradient(135deg, #f8d7da, #f5c6cb); 
            color: #721c24; 
            border: 1px solid #f5c6cb;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
            z-index: 9999;
            backdrop-filter: blur(3px);
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 0;
            max-width: 800px;
            width: 90%;
            max-height: 80vh;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            animation: modalFadeIn 0.3s ease;
        }

        .modal-header {
            background: #f0ad4e;
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.4rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modal-close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            transition: opacity 0.2s ease;
        }

        .modal-close:hover {
            opacity: 0.7;
        }

        .modal-body {
            padding: 30px;
            max-height: 60vh;
            overflow-y: auto;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .info-card {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
        }

        .info-card h4 {
            color: #1a140d;
            margin-bottom: 15px;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .info-details {
            color: #666;
            font-size: 0.9rem;
            line-height: 1.6;
        }

        .info-details strong {
            color: #333;
        }

        @keyframes modalFadeIn {
            from { opacity: 0; transform: scale(0.9); }
            to { opacity: 1; transform: scale(1); }
        }

        @media (max-width: 768px) {
            .info-grid { 
                grid-template-columns: 1fr; 
            }
            
            .operations { 
                flex-direction: column;
                gap: 6px;
                min-width: auto;
            }
            
            .btn-action { 
                width: 100%; 
                min-width: 120px;
            }

            .search-section {
                flex-direction: column;
                gap: 20px;
                align-items: stretch;
            }

            .search-container {
                width: 100%;
            }

            .stats-info {
                text-align: center;
            }
        }

        @media (max-width: 1200px) {
            .operations {
                flex-wrap: wrap;
                gap: 6px;
            }
            
            .btn-action {
                font-size: 12px;
                padding: 8px 10px;
            }
        }

        /* Regras de ajuste de layout */
        .search-section {
            justify-content: space-between;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-left">
            <img src="imagem/arquivado.png" class="user-icon" alt="Ícone de Arquivados">
            <span> Arquivadas</span>
        </div>
        <div class="header-right">
            <img 
                src="imagem/home3.png" 
                class="header-icon" 
                onclick="navegarPara('inicio')" 
                alt="Home Icon" 
                title="Início"
            >
            
            <div class="profile" onclick="toggleDropdown(event)" id="profile-toggle">
                <div class="profile-header">
                    <i class="fas fa-user-circle profile-icon" title="Perfil"></i> 
                    <i class="fas fa-chevron-down profile-arrow"></i>
                </div>
                
                <div class="profile-dropdown" id="profile-dropdown-menu">
                    <a href="/meuperfil" onclick="navegarPara('meuperfil')"><i class="fas fa-user"></i> Meu perfil</a>
                    <a href="/mensalidade" onclick="navegarPara('mensalidade')"><i class="fas fa-file-invoice-dollar"></i> Mensalidade</a>
                    <a href="/arquivados" onclick="navegarPara('arquivados')"><i class="fas fa-archive"></i> Arquivados</a>
                    <div class="dropdown-divider"></div>
                    
                   
                    <a href="/login" onclick="login()"><i class="fas fa-sign-out-alt"></i> Sair</a>
                </div>
            </div>
            </div>
    </header>

    <div class="content-area">
        <div class="search-section">
            <div class="search-container">
                <div class="search-icon"><i class="fas fa-search"></i></div>
                <input type="text" class="search-input" placeholder="Pesquisar criança...">
            </div>
            <div class="stats-info">
                <div id="totalArquivadas">Total de Crianças Arquivadas: 0</div>
            </div>
        </div>

        <div class="table-container">
            <table class="table">
                <thead class="table-header">
                    <tr>
                        <th>Foto</th>
                        <th>Nome da Criança</th>
                        <th>Idade</th>
                        <th>Responsável Principal</th>
                        <th>Operações</th>
                    </tr>
                </thead>
                <tbody id="criancasTableBody"></tbody>
            </table>
        </div>
    </div>

    <div class="modal" id="childDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">
                    <i class="fas fa-child"></i>
                    <span id="modalChildTitle">Detalhes da Criança</span>
                </div>
                <button class="modal-close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div id="childDetailsContainer"></div>
            </div>
        </div>
    </div>

    <script>
        let criancas = [];

        const dadosExemplo = [
            {
                id: 1,
                nome: "Lucas Fernandes Almeida",
                dataNasc: "10/05/2020",
                responsavelPrincipal: "Carla Fernandes",
                responsavelSecundario: "Roberto Almeida",
                telefone: "(71) 98765-4321",
                endereco: "Rua das Acácias, 789 - Barra",
                turma: "Berçário B",
                status: "inativo",
                observacoes: "Transferido para outra cidade",
                dataMatricula: "05/03/2023"
            },
            {
                id: 2,
                nome: "Beatriz Santos Lima",
                dataNasc: "18/09/2019",
                responsavelPrincipal: "Juliana Santos",
                responsavelSecundario: "Fernando Lima",
                telefone: "(71) 97654-3210",
                endereco: "Av. Oceânica, 234 - Ondina",
                turma: "Maternal II",
                status: "inativo",
                observacoes: "Família mudou para o interior",
                dataMatricula: "20/02/2023"
            },
            {
                id: 3,
                nome: "Maria Ativa",
                dataNasc: "01/01/2020",
                responsavelPrincipal: "Mãe Ativa",
                responsavelSecundario: "Pai Ativo",
                telefone: "(71) 91111-1111",
                endereco: "Rua Ativa, 1",
                turma: "Maternal II",
                status: "ativo", /* Este registro não aparecerá na tabela Arquivadas */
                observacoes: "Criança ativa",
                dataMatricula: "01/01/2023"
            }
        ];

        function calcularIdade(dataNasc) {
            const hoje = new Date();
            const partesData = dataNasc.split('/');
            // Converte para formato YYYY-MM-DD para compatibilidade de new Date()
            const nascimento = new Date(`${partesData[2]}-${partesData[1]}-${partesData[0]}`); 
            
            let idade = hoje.getFullYear() - nascimento.getFullYear();
            const mes = hoje.getMonth() - nascimento.getMonth();
            
            if (mes < 0 || (mes === 0 && hoje.getDate() < nascimento.getDate())) {
                idade--;
            }
            
            if (idade === 0) {
                const diffMeses = (hoje.getFullYear() - nascimento.getFullYear()) * 12 + (hoje.getMonth() - nascimento.getMonth());
                // Ajuste se o dia atual for menor que o dia de nascimento
                if (hoje.getDate() < nascimento.getDate()) {
                    return `${diffMeses - 1} meses`;
                }
                return `${diffMeses} meses`;
            }
            
            return `${idade} anos`;
        }
        
        // CORREÇÃO: Função para alternar o dropdown (adiciona/remove classe 'active' para a seta)
        function toggleDropdown(event) {
            if (event) event.stopPropagation();
            
            const dropdown = document.getElementById('profile-dropdown-menu');
            const profile = document.getElementById('profile-toggle');
            
            if (dropdown.style.display === 'block') {
                dropdown.style.display = 'none';
                if (profile) profile.classList.remove('active'); // Remove a classe 'active' para reverter a seta
            } else {
                dropdown.style.display = 'block';
                if (profile) profile.classList.add('active'); // Adiciona a classe 'active' para girar a seta
            }
        }

        // CORREÇÃO 2: Função navegarPara mantendo rotas EJS (absolutas)
        function navegarPara(pagina) {
            const rotas = {
                'inicio': '/home',
                'professor': '/cadastro-professor',
                'financeiro': '/opcoes-financeiro',
                'turma': '/turmas-cadastradas',
                'matricula': '/matricula',
                'cadastro': '/opcoes-aluno',
                
                // Rotas EJS mantidas
                'meuperfil': '/meuperfil', 
                'mensalidade': '/mensalidade',
                'arquivados': '/arquivados', // Rota para a tela de Arquivados
                'ajuda': '/ajuda'
            };

            if (rotas[pagina]) {
                // Antes de navegar, feche o dropdown
                const dropdown = document.getElementById('profile-dropdown-menu');
                const profile = document.getElementById('profile-toggle');
                if (dropdown) dropdown.style.display = 'none';
                if (profile) profile.classList.remove('active');
                
                window.location.href = rotas[pagina];
            } else {
                console.warn(`Rota não encontrada para: ${pagina}`);
            }
        }

        function login() {
             // CORREÇÃO: Usando a rota de login absoluta
            if (confirm('Deseja realmente sair do sistema?')) {
                window.location.href = '/login'; 
            }
        }

        function criarNovoCadastro() {
            window.location.href = '/teste'; // Função mantida, mas botão removido
        }

        function carregarDoStorage() {
            const criancasSalvas = sessionStorage.getItem('criancas');
            if (criancasSalvas) {
                try {
                    return JSON.parse(criancasSalvas);
                } catch (e) {
                    console.error('Erro ao carregar crianças do storage:', e);
                    return dadosExemplo.slice();
                }
            }
            return dadosExemplo.slice();
        }

        function salvarNoStorage(criancasArray) {
            try {
                sessionStorage.setItem('criancas', JSON.stringify(criancasArray));
                console.log('Crianças salvas no storage:', criancasArray);
            } catch (e) {
                console.error('Erro ao salvar crianças:', e);
            }
        }

        function getStatusInfo(status) {
            // Função mantida pois é usada no Modal
            switch (status.toLowerCase()) {
                case 'ativo':
                    return { class: 'status-ativo', text: 'Ativo' };
                case 'pendente':
                    return { class: 'status-pendente', text: 'Pendente' };
                case 'inativo':
                    return { class: 'status-inativo', text: 'Arquivado' };
                default:
                    return { class: 'status-pendente', text: 'Indefinido' };
            }
        }

        function carregarCriancas(filtro = '') {
            criancas = carregarDoStorage();
            const tbody = document.getElementById('criancasTableBody');
            const totalArquivadasDiv = document.getElementById('totalArquivadas');
            tbody.innerHTML = '';

            const criancasArquivadas = criancas.filter(c => c.status && c.status.toLowerCase() === 'inativo');

            console.log('Carregando crianças arquivadas:', criancasArquivadas);

            let criancasFiltradas = criancasArquivadas;

            if (filtro) {
                const termo = filtro.toLowerCase();
                criancasFiltradas = criancasArquivadas.filter(c => 
                    c.nome.toLowerCase().includes(termo) ||
                    c.responsavelPrincipal.toLowerCase().includes(termo) ||
                    (c.turma && c.turma.toLowerCase().includes(termo))
                );
            }

            if (criancasFiltradas.length === 0) {
                const colspanCount = 5; /* Colunas: Foto, Nome, Idade, Responsável, Operações */
                tbody.innerHTML = `<tr><td colspan="${colspanCount}" style="text-align:center; color:#666; padding:40px;">${filtro ? 'Nenhuma criança encontrada com o termo de pesquisa.' : 'Nenhuma criança arquivada encontrada.'}</td></tr>`;
            } else {
                criancasFiltradas.forEach((crianca, index) => {
                    const indexOriginal = criancas.findIndex(c => c.id === crianca.id);
                    const idade = calcularIdade(crianca.dataNasc);
                    const iniciais = crianca.nome.split(' ').map(n => n[0]).join('').substring(0, 2);

                    tbody.innerHTML += `
                        <tr>
                            <td class="avatar-cell">
                                <div class="student-avatar">${iniciais}</div>
                            </td>
                            <td>${crianca.nome}</td>
                            <td><strong>${idade}</strong></td>
                            <td><strong>${crianca.responsavelPrincipal}</strong></td>
                            <td>
                                <div class="operations">
                                    <button class="btn-action btn-view" onclick="visualizarCrianca(${indexOriginal})" title="Ver detalhes">
                                        <i class="fas fa-eye"></i> Ver
                                    </button>
                                    <button class="btn-action btn-unarchive" onclick="desarquivarCrianca(${indexOriginal})" title="Desarquivar criança">
                                        <i class="fas fa-box-open"></i> Desarquivar
                                    </button>
                                </div>
                            </td>
                        </tr>`;
                });
            }
            
            const totalArquivadas = criancas.filter(c => c.status && c.status.toLowerCase() === 'inativo').length;

            if (filtro) {
                totalArquivadasDiv.textContent = `Arquivadas Encontradas: ${criancasFiltradas.length} de ${totalArquivadas}`;
            } else {
                totalArquivadasDiv.textContent = `Total de Crianças Arquivadas: ${totalArquivadas}`;
            }
        }

        function visualizarCrianca(index) {
            const crianca = criancas[index];
            const modal = document.getElementById('childDetailsModal');
            const modalTitle = document.getElementById('modalChildTitle');
            const container = document.getElementById('childDetailsContainer');
            
            modalTitle.textContent = `Detalhes: ${crianca.nome}`;
            
            const idade = calcularIdade(crianca.dataNasc);
            const statusInfo = getStatusInfo(crianca.status);
            
            container.innerHTML = `
                <div style="text-align: center; margin-bottom: 30px;">
                    <div class="student-avatar" style="width: 80px; height: 80px; font-size: 28px; margin: 0 auto 15px;">
                        ${crianca.nome.split(' ').map(n => n[0]).join('').substring(0, 2)}
                    </div>
                    <h2 style="color: #333; margin-bottom: 10px;">${crianca.nome}</h2>
                    <span class="status-badge ${statusInfo.class}">${statusInfo.text}</span>
                </div>
                
                <div class="info-grid">
                    <div class="info-card">
                        <h4><i class="fas fa-child"></i> Informações Pessoais</h4>
                        <div class="info-details">
                            <strong>Data de Nascimento:</strong> ${crianca.dataNasc}<br>
                            <strong>Idade:</strong> ${idade}<br>
                            <strong>Turma:</strong> ${crianca.turma || 'Não definida'}<br>
                            <strong>Data de Matrícula:</strong> ${crianca.dataMatricula}
                        </div>
                    </div>
                    
                    <div class="info-card">
                        <h4><i class="fas fa-users"></i> Responsáveis</h4>
                        <div class="info-details">
                            <strong>Principal:</strong> ${crianca.responsavelPrincipal}<br>
                            ${crianca.responsavelSecundario ? `<strong>Secundário:</strong> ${crianca.responsavelSecundario}<br>` : ''}
                            <strong>Telefone:</strong> ${crianca.telefone}
                        </div>
                    </div>
                    
                    <div class="info-card">
                        <h4><i class="fas fa-map-marker-alt"></i> Endereço</h4>
                        <div class="info-details">
                            ${crianca.endereco}
                        </div>
                    </div>
                    
                    ${crianca.observacoes ? `
                    <div class="info-card">
                        <h4><i class="fas fa-sticky-note"></i> Observações</h4>
                        <div class="info-details">
                            ${crianca.observacoes}
                        </div>
                    </div>
                    ` : ''}
                </div>
            `;
            
            modal.style.display = 'flex';
        }

        function closeModal() {
            document.getElementById('childDetailsModal').style.display = 'none';
        }

        function editarCrianca(index) {
            console.log('Editando criança no índice:', index);
            console.log('Dados da criança:', criancas[index]);
            
            if (index >= 0 && index < criancas.length) {
                const crianca = criancas[index];
                const dadosParaEdicao = {
                    index: index,
                    dados: crianca
                };
                
                sessionStorage.setItem('criancaParaEditar', JSON.stringify(dadosParaEdicao));
                
                console.log('Dados salvos para edição:', dadosParaEdicao);
                
                setTimeout(() => {
                    window.location.href = '/editar-crianca';
                }, 100);
            } else {
                console.error('Índice inválido para edição:', index);
                alert('Erro: Criança não encontrada para edição.');
            }
        }

        function desarquivarCrianca(index) {
            const crianca = criancas[index];
            
            if (confirm(`Tem certeza que deseja desarquivar "${crianca.nome}"?\n\nEsta criança será movida para ativo.`)) {
                criancas[index].status = 'ativo';
                salvarNoStorage(criancas);
                carregarCriancas();
                console.log('Criança desarquivada:', crianca.nome);
                
                alert(`${crianca.nome} foi desarquivado(a) com sucesso!`);
            }
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            const criancasAtuais = carregarDoStorage();
            if (criancasAtuais.length === 0) {
                console.log('Nenhuma criança encontrada, criando dados de exemplo');
                salvarNoStorage(dadosExemplo);
            }
            
            carregarCriancas();
            
            const criancaCadastrada = sessionStorage.getItem('novaCrianca');
            if (criancaCadastrada) {
                try {
                    const crianca = JSON.parse(criancaCadastrada);
                    // Adicionando a lógica para que a nova criança salva seja 'inativa' por padrão se a tela for a de inativos
                    if (!crianca.status) crianca.status = 'inativo'; 
                    adicionarCrianca(crianca);
                    sessionStorage.removeItem('novaCrianca');
                } catch (e) {
                    console.error('Erro ao processar nova criança:', e);
                }
            }
            
            const searchInput = document.querySelector('.search-input');
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value;
                carregarCriancas(searchTerm);
            });
            
            const modal = document.getElementById('childDetailsModal');
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });
            
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeModal();
                }
            });
            
            // CÓDIGO NOVO: Fechar o dropdown quando clicar fora dele
            document.addEventListener('click', function(event) {
                const dropdown = document.getElementById('profile-dropdown-menu');
                const profileToggle = document.getElementById('profile-toggle');
                
                // Verifica se o clique não foi no dropdown e nem no elemento pai
                if (dropdown && dropdown.style.display === 'block' && event.target !== profileToggle && !profileToggle.contains(event.target)) {
                    dropdown.style.display = 'none';
                    profileToggle.classList.remove('active');
                }
            });
        });
        
        function adicionarCrianca(novaCrianca) {
            if (!novaCrianca.id) {
                novaCrianca.id = Date.now();
            }
            
            criancas.push(novaCrianca);
            salvarNoStorage(criancas);
            carregarCriancas();
            console.log('Nova criança adicionada:', novaCrianca);
        }

        function filtrarPorStatus(status) {
            // Função mantida, mas ineficaz
        }

        function exportarDados() {
            const dataStr = JSON.stringify(criancas, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            
            const exportFileDefaultName = `criancas_cadastradas_${new Date().toISOString().split('T')[0]}.json`;
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
        }

        window.toggleDropdown = toggleDropdown; // Expondo a nova função
        window.adicionarCrianca = adicionarCrianca;
        window.navegarPara = navegarPara;
        window.login = login;
        window.criarNovoCadastro = criarNovoCadastro;
        window.visualizarCrianca = visualizarCrianca;
        window.closeModal = closeModal;
        window.editarCrianca = editarCrianca;
        window.desarquivarCrianca = desarquivarCrianca;
        window.filtrarPorStatus = filtrarPorStatus;
        window.exportarDados = exportarDados;
    </script>
</body>
</html>