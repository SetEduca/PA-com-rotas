<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Sete Educa - Crianças Cadastradas</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
* { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
body { background-color: #e8e8e8; min-height: 100vh; display: flex; }

.sidebar {
width: 280px;
background: linear-gradient(180deg, #FFF4DF 0%, #f8f0e3 100%);
display: flex;
flex-direction: column;
justify-content: space-between;
box-shadow: 2px 0 15px rgba(0, 0, 0, 0.1);
min-height: 100vh;
flex-shrink: 0;
}

.logo {
padding: 0px 40px;
text-align: center;
margin-bottom: 25px;
margin-top: 30px;
}

.logo img {
max-width: 100%;
height: auto;
}

.menu {
flex: 1;
padding: 20px 18px;
overflow-y: auto;
}

.menu-item {
padding: 30px 20px;
margin-bottom: 6px;
border-radius: 6px;
cursor: pointer;
transition: all 0.3s ease;
position: relative;
display: flex;
align-items: center;
font-weight: 500;
overflow: visible;
color: black;
text-decoration: none;
}

.menu-item i {
margin-right: 15px;
font-size: 18px;
width: 24px;
text-align: center;
z-index: 2;
}

.menu-item span {
z-index: 2;
font-size: 15px;
}

.menu-item:hover {
background-color: #6c757d21;
}

.menu-item::after {
padding: 0 10px;
content: '';
position: absolute;
bottom: -3px;
left: 20px;
height: 2px;
width: 0px;
transition: width 0.3s ease;
border-radius: 1px;
}

.menu-item:nth-child(1)::after { background-color: #F4BF27; }
.menu-item:nth-child(2)::after { background-color: #306bc2; }
.menu-item:nth-child(3)::after { background-color: #9747FF; }
.menu-item:nth-child(4)::after { background-color: #F88C12; }
.menu-item:nth-child(5)::after { background-color: #D22A2A; }
.menu-item:nth-child(6)::after { background-color: #59C631; }

.menu-item.active {
background-color: rgba(128, 128, 128, 0.356);
color: #333;
font-weight: 600;
}

.menu-item.active::before {
content: '';
position: absolute;
right: 15px;
top: 50%;
transform: translateY(-50%);
width: 8px;
height: 8px;
border-radius: 50%;
background-color: #333;
z-index: 2;
}

.seteeduca {
color: #333;
text-align: center;
margin-bottom: 10px;
}

.sidebar-footer {
padding: 20px 18px;
border-top: 1px solid rgba(0, 0, 0, 0.1);
}

.logout-button {
padding: 16px 20px;
border-radius: 8px;
cursor: pointer;
transition: all 0.3s ease;
display: flex;
align-items: center;
font-weight: 500;
color: #333;
width: 100%;
border: none;
background: transparent;
}

.logout-button i {
margin-right: 15px;
font-size: 18px;
width: 24px;
text-align: center;
}

.logout-button:hover {
background-color: rgba(210, 42, 42, 0.1);
color: #c01e26;
font-weight: 600;
}

.main-content {
flex: 1;
min-height: 100vh;
display: flex;
flex-direction: column;
}

.header {
background: #306bc2;
height: 80px;
display: flex;
align-items: center;
justify-content: space-between;
padding: 0 30px;
color: white;
width: 100%;
}

.header-title {
display: flex;
align-items: center;
position: relative;
top: 0.7vh;
gap: 10px;
font-size: 1.5rem;
color: rgb(255, 255, 255);
font-family: 'Kodchasan', sans-serif;
}

.header-title i {
margin-right: 15px;
font-size: 28px;
}

/* === CSS ADICIONADO PARA O MENU DE PERFIL === */
.profile {
    position: relative;
    cursor: pointer;
}

.profile-header {
    display: flex;
    align-items: center;
    gap: 10px;
}

.profile-icon {
    font-size: 28px;
    color: white;
}

.profile-arrow {
    font-size: 16px;
    color: white;
    transition: transform 0.3s ease;
}

.profile-dropdown {
    display: none; /* Começa escondido */
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    min-width: 200px;
    z-index: 1000;
    padding: 8px 0;
    margin-top: 10px;
    overflow: hidden;
    animation: fadeIn 0.2s ease-out;
}

.profile-dropdown.show {
    display: block; /* Mostra o dropdown */
}

.profile-dropdown a {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px 16px;
    color: #333;
    font-size: 14px;
    text-decoration: none;
    transition: background-color 0.2s ease;
}

.profile-dropdown a:hover {
    background-color: #f4f4f4;
}

.profile-dropdown a i {
    width: 20px;
    text-align: center;
    color: #555;
}

.profile.active .profile-arrow {
    transform: rotate(180deg);
}

.dropdown-divider {
    height: 1px;
    background-color: #eee;
    margin: 8px 0;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
/* === FIM DO CSS ADICIONADO === */


.content-area {
padding: 30px;
background: #fcf8f2;
flex: 1;
width: 100%;
}

.search-section {
display: flex;
align-items: center;
justify-content: space-between;
margin-bottom: 30px;
}

.search-container {
position: relative;
width: 400px;
}

.search-input {
width: 100%;
height: 50px;
background: white;
border: 2px solid #ddd;
border-radius: 25px;
padding: 0 20px 0 50px;
font-size: 16px;
color: #666;
outline: none;
}

.search-input:focus {
border-color: #709ee4;
box-shadow: 0 0 0 3px rgba(57, 128, 196, 0.1);
}

.search-icon {
position: absolute;
left: 18px;
top: 50%;
transform: translateY(-50%);
color: #999;
font-size: 18px;
}

.new-button {
display: flex;
flex-direction: column;
align-items: center;
gap: 8px;
cursor: pointer;
transition: transform 0.2s ease;
}

.new-button:hover {
transform: translateY(-2px);
}

.new-button-circle {
width: 45px;
height: 45px;
background: #306bc2;
border-radius: 50%;
display: flex;
align-items: center;
justify-content: center;
color: white;
font-size: 28px;
font-weight: 200;
position: relative;
transition: background-color 0.3s ease;
}

.new-button:hover .new-button-circle {
background: #4f9be2;
}

.new-button-circle::before {
content: '+';
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
font-size: 28px;
}

.new-text {
font-size: 14px;
color: #666;
font-weight: 500;
text-align: center;
}

.stats-info {
text-align: right;
color: #333;
font-size: 18px;
font-weight: 600;
}

.table-container {
background: white;
border-radius: 12px;
border-top: 5px solid #306bc2;
box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
overflow: hidden;
}

.table {
width: 100%;
border-collapse: collapse;
}

.table-header {
background: #f8f9fa;
color: #666;
font-weight: 600;
font-size: 14px;
text-transform: uppercase;
}

.table th, .table td {
padding: 20px;
text-align: center;
border-bottom: 1px solid #eee;
}

.avatar-cell {
display: flex;
align-items: center;
justify-content: center;
}

.student-avatar {
width: 50px;
height: 50px;
border-radius: 50%;
background: linear-gradient(135deg, #306bc2, #4f9be2);
display: flex;
align-items: center;
justify-content: center;
color: white;
font-weight: 600;
font-size: 18px;
}

.operations {
display: flex;
justify-content: center;
align-items: center;
gap: 8px;
min-width: 200px;
}

.btn-action {
display: inline-flex;
align-items: center;
justify-content: center;
gap: 6px;
padding: 10px 14px;
border: none;
border-radius: 8px;
cursor: pointer;
font-size: 13px;
font-weight: 600;
text-decoration: none;
transition: all 0.3s ease;
white-space: nowrap;
min-width: 0;
flex: 0 0 auto;
}

.btn-action i {
font-size: 14px;
}

.btn-view {
background: #e8f5e8;
color: #2e7d32;
border: 2px solid #c8e6c9;
}

.btn-view:hover {
background: #c8e6c9;
transform: translateY(-2px);
box-shadow: 0 4px 8px rgba(46, 125, 50, 0.2);
}

.btn-edit {
background: #e3f2fd;
color: #306bc2;
border: 2px solid #bbdefb;
}

.btn-edit:hover {
background: #bbdefb;
transform: translateY(-2px);
box-shadow: 0 4px 8px rgba(25, 118, 210, 0.2);
}

.btn-delete {
background: #fce4ec;
color: #c01e26;
border: 2px solid #f8bbd9;
}

.btn-delete:hover {
background: #f8bbd9;
transform: translateY(-2px);
box-shadow: 0 4px 8px rgba(194, 24, 91, 0.2);
}

.status-badge {
display: inline-block;
padding: 6px 12px;
border-radius: 20px;
font-size: 12px;
font-weight: 700;
text-transform: uppercase;
letter-spacing: 0.5px;
}

/* Modificado para refletir a nova estrutura de dados (ativo/inativo) e cor-padrão */
.status-ativo {
background: linear-gradient(135deg, #d4edda, #c3e6cb);
color: #155724;
border: 1px solid #c3e6cb;
}

.status-inativo {
background: linear-gradient(135deg, #f8d7da, #f5c6cb);
color: #721c24;
border: 1px solid #f5c6cb;
}

.status-pendente { /* Mantido para fallback */
background: linear-gradient(135deg, #fff3cd, #ffeaa7);
color: #856404;
border: 1px solid #ffeaa7;
}

.modal {
display: none;
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background-color: rgba(0,0,0,0.5);
justify-content: center;
align-items: center;
z-index: 9999;
backdrop-filter: blur(3px);
}

.modal-content {
background: white;
border-radius: 12px;
padding: 0;
max-width: 800px;
width: 90%;
max-height: 80vh;
overflow: hidden;
box-shadow: 0 10px 25px rgba(0,0,0,0.2);
animation: modalFadeIn 0.3s ease;
}

.modal-header {
background: #306bc2;
color: white;
padding: 20px 30px;
display: flex;
justify-content: space-between;
align-items: center;
}

.modal-title {
font-size: 1.4rem;
font-weight: 600;
display: flex;
align-items: center;
gap: 10px;
}

.modal-close {
background: none;
border: none;
color: white;
font-size: 24px;
cursor: pointer;
padding: 5px;
transition: opacity 0.2s ease;
}

.modal-close:hover {
opacity: 0.7;
}

.modal-body {
padding: 30px;
max-height: 60vh;
overflow-y: auto;
}

.info-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
gap: 20px;
margin-top: 20px;
}

.info-card {
background: #f8f9fa;
border: 2px solid #e9ecef;
border-radius: 12px;
padding: 20px;
}

.info-card h4 {
color: #306bc2;
margin-bottom: 15px;
font-size: 1.1rem;
display: flex;
align-items: center;
gap: 8px;
}

.info-details {
color: #666;
font-size: 0.9rem;
line-height: 1.6;
}

.info-details strong {
color: #333;
}

@keyframes modalFadeIn {
from { opacity: 0; transform: scale(0.9); }
to { opacity: 1; transform: scale(1); }
}

@media (max-width: 768px) {
.sidebar {
width: 70px;
}

.menu-item span, .logout-button span {
display: none;
}

.menu-item i, .logout-button i {
margin-right: 0;
}

.info-grid {
grid-template-columns: 1fr;
}

.operations {
flex-direction: column;
gap: 6px;
min-width: auto;
}

.btn-action {
width: 100%;
min-width: 120px;
}

.search-section {
flex-direction: column;
gap: 20px;
align-items: stretch;
}

.search-container {
width: 100%;
}

.stats-info {
text-align: center;
}
}

@media (max-width: 1200px) {
.operations {
flex-wrap: wrap;
gap: 6px;
}

.btn-action {
font-size: 12px;
padding: 8px 10px;
}
}
</style>
</head>
<body>
<div class="sidebar">
<div>
<div class="logo">
<img src="imagem/logo.png" alt="logo">
</div>
<div class="menu">
<div class="menu-item" onclick="navegarPara('inicio')">
<i class="fas fa-home"></i>
<span>INÍCIO</span>
</div>
<div class="menu-item active">
<i class="fas fa-address-card"></i>
<span>CADASTRO</span>
</div>
<div class="menu-item" onclick="navegarPara('matricula')">
<i class="fas fa-user-graduate"></i>
<span>MATRÍCULA</span>
</div>
<div class="menu-item" onclick="navegarPara('professor')">
<i class="fas fa-chalkboard-teacher"></i>
<span>PROFESSOR</span>
</div>
<div class="menu-item" onclick="navegarPara('turma')">
<i class="fas fa-users"></i>
<span>TURMA</span>
</div>
<div class="menu-item" onclick="navegarPara('financeiro')">
<i class="fas fa-dollar-sign"></i>
<span>FINANCEIRO</span>
</div>
</div>
</div>
<div class="seteeduca">
<p></p>
</div>
<div class="sidebar-footer">
<button class="logout-button" onclick="logout()">
<i class="fas fa-sign-out-alt"></i>
<span>SAIR</span>
</button>
</div>
</div>

<div class="main-content">
<div class="header">
<div class="header-title">
<i class="fas fa-child"></i>
<span>Crianças <b>CADASTRADAS</b></span>
</div>

<div class="profile" id="profile-toggle">
    <div class="profile-header">
        <i class="fas fa-user-circle profile-icon"></i>
        <i class="fas fa-chevron-down profile-arrow"></i>
    </div>
    <div class="profile-dropdown" id="profile-dropdown-menu">
        <a href="/meuperfil" onclick="navegarPara('meu-perfil')"><i class="fas fa-user"></i> Meu perfil</a>
        <a href="/mensalidade" onclick="navegarPara('mensalidade')"><i class="fas fa-file-invoice-dollar"></i> Mensalidade</a>
        <a href="/arquivados" onclick="navegarPara('arquivados')"><i class="fas fa-archive"></i> Arquivados</a>
        <div class="dropdown-divider"></div>
                <a href="#" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Sair</a>
    </div>
</div>
</div>
<div class="content-area">
<div class="search-section">
<div class="search-container">
<div class="search-icon"><i class="fas fa-search"></i></div>
<input type="text" class="search-input" placeholder="Pesquisar criança...">
</div>
<div class="new-button" onclick="criarNovoCadastro()">
<div class="new-button-circle"></div>
<div class="new-text">Nova Criança</div>
</div>
<div class="stats-info" id="totalCriancas">Total de Crianças: 0</div>
</div>

<div class="table-container">
<table class="table">
<thead class="table-header">
<tr>
<th>Foto</th>
<th>Nome da Criança</th>
<th>Idade</th>
<th>Responsável Principal</th>
<th>Matrícula</th>
<th>Operações</th>
</tr>
</thead>
<tbody id="criancasTableBody">
</tbody>
</table>
</div>
</div>
</div>

<div class="modal" id="childDetailsModal">
<div class="modal-content">
<div class="modal-header">
<div class="modal-title">
<i class="fas fa-child"></i>
<span id="modalChildTitle">Detalhes da Criança</span>
</div>
<button class="modal-close" onclick="closeModal()">&times;</button>
</div>
<div class="modal-body">
<div id="childDetailsContainer"></div>
</div>
</div>
</div>

<script>
// Variável global para armazenar os dados carregados
let criancas = [];

function calcularIdade(dataNasc) {
const hoje = new Date();
// Garante que a data seja interpretada corretamente
const dataFormatada = dataNasc.includes('T') ? dataNasc.split('T')[0] : dataNasc;
const partesData = dataFormatada.split(dataFormatada.includes('/') ? '/' : '-');

// Formato esperado: DD/MM/YYYY ou YYYY-MM-DD
const nascimento = dataFormatada.includes('/')
? new Date(partesData[2], partesData[1] - 1, partesData[0]) // DD/MM/YYYY
: new Date(partesData[0], partesData[1] - 1, partesData[2]); // YYYY-MM-DD

let idade = hoje.getFullYear() - nascimento.getFullYear();
const mes = hoje.getMonth() - nascimento.getMonth();
if (mes < 0 || (mes === 0 && hoje.getDate() < nascimento.getDate())) {
idade--;
}

if (idade < 0) return 'Data inválida';
if (idade === 0) {
const meses = hoje.getMonth() - nascimento.getMonth() + (12 * (hoje.getFullYear() - nascimento.getFullYear()));
return `${meses} meses`;
}

return `${idade} anos`;
}

function navegarPara(pagina) {
const rotas = {
'inicio': '/home',
'professor': '/professores',
'financeiro': '/financeiro',
'turma': '/turmas-cadastradas',
'matricula': '/matricula',
'cadastro': '/acessar-aluno', // Esta rota leva para a lista, não para o cadastro
'meu-perfil': '/meuperfil', // Rota adicionada
'mensalidade': '/mensalidade', // Rota adicionada
'arquivados': '/arquivados' // Rota adicionada
};

if (rotas[pagina]) {
window.location.href = rotas[pagina];
} else {
console.warn(`Rota não encontrada para: ${pagina}`);
}
}

function logout() {
if (confirm('Deseja realmente sair do sistema?')) {
window.location.href = '/login';
}
}

function criarNovoCadastro() {
window.location.href = '/cadastro-aluno'; // Rota para a página de cadastro
}

// REMOVIDO: getStatusInfo não é mais necessário, pois o back-end renderiza a tabela diretamente.
// MANTIDO, mas ajustado para aceitar 'ativo' ou 'inativo' se for usado na busca
function getStatusInfo(ativo) {
if (ativo === true) {
return { class: 'status-ativo', text: 'Ativo' };
} else if (ativo === false) {
return { class: 'status-inativo', text: 'Arquivado' };
}
// Fallback para quando o front-end não tiver essa informação na listagem
return { class: 'status-pendente', text: 'Indefinido' };
}


// AJUSTADO: Esta função agora espera os dados renderizados pelo back-end em 'alunos'
// e apenas preenche o campo de contagem e renderiza o HTML (se for uma chamada API de busca).
function renderTable(criancasData) {
const tbody = document.getElementById('criancasTableBody');
const totalCriancas = document.getElementById('totalCriancas');
tbody.innerHTML = '';

if (!criancasData || criancasData.length === 0) {
tbody.innerHTML = '<tr><td colspan="6" style="text-align:center; color:#666; padding:40px;">Nenhuma criança encontrada</td></tr>';
totalCriancas.textContent = `Total de Crianças: 0`;
return;
}

criancasData.forEach((crianca) => {
// O back-end CADASTRO_CRIANCA está retornando 'ativo: true'
// O status é agora 'Ativo' se 'ativo' for true.
const statusInfo = getStatusInfo(crianca.ativo);
const idade = calcularIdade(crianca.data_nascimento);
const iniciais = crianca.nome.split(' ').map(n => n[0]).join('').substring(0, 2);

// O back-end está retornando os dados aninhados
const endereco = crianca.ENDERECO_CRIANCA[0]; // Assume que é um array com 1 elemento
const obsSaude = crianca.SAUDE_CRIANCA[0]; // Assume que é um array com 1 elemento

tbody.innerHTML += `
<tr>
<td class="avatar-cell">
<div class="student-avatar">${iniciais.toUpperCase()}</div>
</td>
<td style="font-weight: 600; text-align: left;">${crianca.nome}</td>
<td><strong>${idade}</strong></td>
<td>${crianca.responsavel_principal || 'N/A'}</td>
<td>
<span class="status-badge ${statusInfo.class}">
${statusInfo.text}
</span>
</td>
<td>
<div class="operations">
<button class="btn-action btn-view" onclick="visualizarCrianca(${crianca.id})" title="Ver detalhes">
<i class="fas fa-eye"></i> Ver
</button>
<button class="btn-action btn-edit" onclick="editarCrianca(${crianca.id})" title="Editar cadastro">
<i class="fas fa-edit"></i> Editar
</button>
<button class="btn-action btn-delete" onclick="arquivarCrianca(${crianca.id}, '${crianca.nome}')" title="Arquivar Cadastro">
<i class="fas fa-archive"></i> Arquivar
</button>
</div>
</td>
</tr>`;
});
totalCriancas.textContent = `Total de Crianças: ${criancasData.length}`;
}

// MUDANÇA: carregarCriancas
// Agora busca a lista completa na rota principal (index) para armazenar globalmente,
// e utiliza a rota /api/listar apenas para a listagem/busca inicial.
// No seu novo back-end, a listagem inicial já é feita na rota '/', então não precisa do /api/listar.

// O trecho abaixo assume que o EJS está sendo renderizado com uma variável `alunos`
// injetada pelo back-end na rota '/' (conforme o seu novo `aluno-acessar.routes.js` snippet front):
// res.render('ALUNO/acessar-aluno', { alunos: data });

// Se estiver sendo renderizado assim, a variável `alunos` estaria disponível aqui.
// Como não temos acesso ao seu EJS completo, vamos manter a chamada de API
// de listagem, mas usando o novo formato de dados.

async function carregarCriancas(searchTerm = '') {
try {
    let url = '/acessar-aluno/api/listar';
    if (searchTerm.length > 0) {
        url = `/acessar-aluno/api/buscar?termo=${encodeURIComponent(searchTerm)}`;
    }
    
    // CORREÇÃO: Usamos a rota de listagem/busca
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error('Erro ao buscar dados do servidor');
    }
    
    // O back-end agora retorna dados 'normalizados' ou 'data'
    // O novo back-end retorna: alunosNormalizados para a listagem inicial e data para a busca
    const data = await response.json(); 
    
    // Se a listagem inicial vier do render (res.render) com a variável `alunos`, 
    // a variável `data` da busca deve ser usada. 
    // Para simplificar, vamos assumir que a **API de listagem** é a fonte principal.
    criancas = data; // Armazena os dados globalmente
    renderTable(criancas);
} catch (error) {
    console.error('Falha ao carregar crianças:', error);
    const tbody = document.getElementById('criancasTableBody');
    tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; color:red; padding:40px;">Erro ao carregar dados do servidor. Tente novamente.</td></tr>`;
    document.getElementById('totalCriancas').textContent = 'Total de Crianças: 0';
}
}


// AJUSTADO: visualizarCrianca
// Agora usa o formato de resposta da nova rota: 
// .select('*, data_nascimento as \"dataNasc\", ENDERECO_CRIANCA(*), SAUDE_CRIANCA(*)')
async function visualizarCrianca(id) {
try {
    // CORREÇÃO: Caminho absoluto para a nova rota de detalhes
    const response = await fetch(`/acessar-aluno/api/detalhes/${id}`);
    if (!response.ok) {
        throw new Error('Criança não encontrada');
    }
    // A resposta agora contém o objeto completo da criança, com os dados aninhados
    const crianca = await response.json(); 
    
    const modal = document.getElementById('childDetailsModal');
    const modalTitle = document.getElementById('modalChildTitle');
    const container = document.getElementById('childDetailsContainer');
    
    modalTitle.textContent = `Detalhes: ${crianca.nome}`;

    const idade = calcularIdade(crianca.data_nascimento);
    const statusInfo = getStatusInfo(crianca.ativo);

    const endereco = crianca.ENDERECO_CRIANCA;
    const saude = crianca.SAUDE_CRIANCA;

    // Formatação dos dados aninhados
    const enderecoFormatado = endereco 
        ? `${endereco.rua || ''}, Nº ${endereco.numero || 'S/N'} - ${endereco.bairro || ''}<br>
           ${endereco.cidade || ''}/${endereco.estado || ''} - CEP: ${endereco.cep || 'N/A'}`
        : 'Nenhum endereço cadastrado.';
        
    const observacoes = saude && saude.observacoes ? saude.observacoes : 'Nenhuma observação de saúde registrada.';

    const dataNascFormatada = crianca.data_nascimento ? new Date(crianca.data_nascimento).toLocaleDateString('pt-BR', {timeZone: 'UTC'}) : 'N/A';


    container.innerHTML = `
    <div style="text-align: center; margin-bottom: 30px;">
    <div class="student-avatar" style="width: 80px; height: 80px; font-size: 28px; margin: 0 auto 15px;">
    ${crianca.nome.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase()}
    </div>
    <h2 style="color: #333; margin-bottom: 10px;">${crianca.nome}</h2>
    <span class="status-badge ${statusInfo.class}">${statusInfo.text}</span>
    </div>

    <div class="info-grid">
    <div class="info-card">
    <h4><i class="fas fa-child"></i> Informações Pessoais</h4>
    <div class="info-details">
    <strong>Data de Nascimento:</strong> ${dataNascFormatada}<br>
    <strong>Idade:</strong> ${idade}<br>
    <strong>Sexo:</strong> ${crianca.sexo || 'N/A'}<br>
    <strong>Naturalidade:</strong> ${crianca.naturalidade || 'N/A'}
    </div>
    </div>

    <div class="info-card">
    <h4><i class="fas fa-users"></i> Responsáveis</h4>
    <div class="info-details">
    <strong>Principal:</strong> ${crianca.responsavel_principal || 'N/A'}<br>
    <strong>Secundário:</strong> ${crianca.responsavel_secundario || 'N/A'}
    </div>
    </div>

    <div class="info-card">
    <h4><i class="fas fa-map-marker-alt"></i> Endereço</h4>
    <div class="info-details">
    ${enderecoFormatado}
    </div>
    </div>

    <div class="info-card">
    <h4><i class="fas fa-sticky-note"></i> Observações de Saúde</h4>
    <div class="info-details">
    ${observacoes}
    </div>
    </div>
    </div>
    `;

    modal.style.display = 'flex';
} catch (error) {
    console.error('Erro ao visualizar criança:', error);
    alert('Não foi possível carregar os detalhes da criança.');
}
}

function closeModal() {
document.getElementById('childDetailsModal').style.display = 'none';
}

function editarCrianca(id) {
window.location.href = `/editar-aluno?id=${id}`; 
}

// ADICIONADO: Função para arquivar o cadastro (POST para exclusão lógica)
async function arquivarCrianca(id, nome) {
if (confirm(`Tem certeza que deseja arquivar (tornar inativo) o cadastro de "${nome}"?`)) {
    try {
        const response = await fetch(`/acessar-aluno/arquivar/${id}`, { 
            method: 'POST', // Rota de arquivar é um POST no seu back-end
            headers: { 'Content-Type': 'application/json' }
        });
        
        const responseData = await response.json();

        if (!response.ok) {
            throw new Error(responseData.error || 'Falha ao arquivar');
        }
        
        alert('Cadastro arquivado com sucesso! Ele não aparecerá mais nesta lista de ativos.');
        carregarCriancas(); // Recarrega a lista para remover o aluno arquivado
    } catch (error) {
        console.error("Erro ao arquivar:", error);
        alert(`Ocorreu um erro ao tentar arquivar: ${error.message}`);
    }
}
}

// Esta função agora deve ser usada para filtrar a lista global `criancas`
function filtrarPorStatus(status) {
    // Esta função foi removida/adaptada no back-end,
    // mas o filtro pode ser feito no front-end na variável global `criancas`

    const criancasAtivas = criancas.filter(c => c.ativo); // Filtra só ativos
    
    let criancasFiltradas = criancasAtivas;
    
    if (status && status.toLowerCase() !== 'todos') {
        // Se precisar de filtros adicionais além de 'ativo', implemente aqui
        // Ex: criancasFiltradas = criancasAtivas.filter(c => c.status.toLowerCase() === status.toLowerCase());
    }

    renderTable(criancasFiltradas);
}

function exportarDados() {
if (criancas.length === 0) {
alert('Não há dados para exportar.');
return;
}
const dataStr = JSON.stringify(criancas, null, 2);
const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
const exportFileDefaultName = `criancas_cadastradas_${new Date().toISOString().split('T')[0]}.json`;
const linkElement = document.createElement('a');
linkElement.setAttribute('href', dataUri);
linkElement.setAttribute('download', exportFileDefaultName);
linkElement.click();
}

// MODIFICADO: DOMContentLoaded
document.addEventListener('DOMContentLoaded', function() {
    // A listagem inicial na rota '/' está usando res.render no novo back-end.
    // Para funcionar com o EJS renderizando e a busca por API, é melhor chamar a API de listagem.
    // carregarCriancas() chama a API /acessar-aluno/api/listar
    carregarCriancas(); 

    const searchInput = document.querySelector('.search-input');
    let searchTimeout; 

    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const searchTerm = this.value.toLowerCase();
        const totalCriancas = document.getElementById('totalCriancas');

        searchTimeout = setTimeout(async () => {
            try {
                if (searchTerm.length === 0) {
                    carregarCriancas(); 
                    return;
                }
                if (searchTerm.length < 2) {
                    renderTable([]); 
                    totalCriancas.textContent = 'Digite ao menos 2 letras...';
                    return; 
                }

                // CORREÇÃO: Caminho absoluto para chamar /acessar-aluno/api/buscar
                const response = await fetch(`/acessar-aluno/api/buscar?termo=${encodeURIComponent(searchTerm)}`);
                if (!response.ok) {
                    throw new Error('Erro ao buscar');
                }
                const criancasFiltradas = await response.json();
                renderTable(criancasFiltradas); 

                totalCriancas.textContent = `Encontradas: ${criancasFiltradas.length}`;

            } catch (error) {
                console.error('Erro na busca:', error);
                const tbody = document.getElementById('criancasTableBody');
                tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; color:red; padding:40px;">Erro ao realizar busca.</td></tr>`;
            }
        }, 300);
    });
    // Lógica do Modal (original)
    const modal = document.getElementById('childDetailsModal');
    modal.addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeModal();
        }
    });

    // === JAVASCRIPT ADICIONADO PARA O MENU DE PERFIL ===
    const profileToggle = document.getElementById('profile-toggle');
    const profileDropdown = document.getElementById('profile-dropdown-menu');

    if (profileToggle && profileDropdown) {
        profileToggle.addEventListener('click', function(e) {
            e.stopPropagation(); // Impede que o clique feche o menu imediatamente
            profileDropdown.classList.toggle('show');
            profileToggle.classList.toggle('active');
        });

        // Fecha o dropdown se clicar em qualquer outro lugar
        document.addEventListener('click', function(e) {
            if (!profileToggle.contains(e.target) && profileDropdown.classList.contains('show')) {
                profileDropdown.classList.remove('show');
                profileToggle.classList.remove('active');
            }
        });
    }
    // === FIM DO JAVASCRIPT ADICIONADO ===

});

// EXPOSIÇÃO GLOBAL das funções
window.navegarPara = navegarPara;
window.logout = logout;
window.criarNovoCadastro = criarNovoCadastro;
window.visualizarCrianca = visualizarCrianca;
window.closeModal = closeModal;
window.editarCrianca = editarCrianca;
window.arquivarCrianca = arquivarCrianca; 
window.filtrarPorStatus = filtrarPorStatus;
window.exportarDados = exportarDados;
</script>
</body>
</html>